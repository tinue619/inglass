// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showAdminPanel() {
    console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å');
    
    const mainContent = document.getElementById('mainContent');
    if (!mainContent) {
        console.error('mainContent –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    mainContent.innerHTML = `
        <div class="admin-panel">
            <h2>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h2>
            <div style="margin-bottom: 20px;">
                <button class="btn btn-success" onclick="createTestData()">üé≠ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</button>
                <button class="btn btn-warning" onclick="clearAllData()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ</button>
            </div>
            
            <div class="admin-tabs">
                <button class="tab-btn active" onclick="switchTab('users')">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</button>
                <button class="tab-btn" onclick="switchTab('processes')">–ü—Ä–æ—Ü–µ—Å—Å—ã</button>
                <button class="tab-btn" onclick="switchTab('products')">–ò–∑–¥–µ–ª–∏—è</button>
                <button class="tab-btn" onclick="switchTab('orders')">–ó–∞–∫–∞–∑—ã</button>
            </div>
            
            <div id="tab-users" class="tab-content active">
                <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
                <button class="btn btn-primary" onclick="addUser()">–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</button>
                <div id="users-table"></div>
            </div>
            
            <div id="tab-processes" class="tab-content">
                <h3>–ü—Ä–æ—Ü–µ—Å—Å—ã</h3>
                <button class="btn btn-primary" onclick="addProcess()">–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å</button>
                <div id="processes-table"></div>
            </div>
            
            <div id="tab-products" class="tab-content">
                <h3>–ò–∑–¥–µ–ª–∏—è</h3>
                <button class="btn btn-primary" onclick="addProduct()">–î–æ–±–∞–≤–∏—Ç—å –∏–∑–¥–µ–ª–∏–µ</button>
                <div id="products-table"></div>
            </div>
            
            <div id="tab-orders" class="tab-content">
                <h3>–ó–∞–∫–∞–∑—ã</h3>
                <button class="btn btn-primary" onclick="addOrder()">–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑</button>
                <div id="orders-table"></div>
            </div>
        </div>
    `;
    
    // –†–µ–Ω–¥–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(() => {
        renderAllTables();
    }, 100);
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function switchTab(tabName) {
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞:', tabName);
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    if (event && event.target) {
        event.target.classList.add('active');
    }
    document.getElementById('tab-' + tabName).classList.add('active');
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
function renderAllTables() {
    console.log('–†–µ–Ω–¥–µ—Ä–∏–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã');
    renderUsersTable();
    renderProcessesTable();
    renderProductsTable();
    renderOrdersTable();
}

// === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ===
function renderUsersTable() {
    const container = document.getElementById('users-table');
    if (!container) return;
    
    console.log('–†–µ–Ω–¥–µ—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', data.users.length);
    
    if (data.users.length === 0) {
        container.innerHTML = '<p>–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>';
        return;
    }
    
    const tableHTML = `
        <table class="data-table">
            <thead>
                <tr>
                    <th>–ò–º—è</th>
                    <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                    <th>–¢–∏–ø</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${data.users.map(user => `
                    <tr>
                        <td>${user.name}</td>
                        <td>${user.phone}</td>
                        <td>${user.isAdmin ? '–ê–¥–º–∏–Ω' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</td>
                        <td>
                            <button class="btn btn-small btn-secondary" onclick="editUser(${user.id})">–ò–∑–º–µ–Ω–∏—Ç—å</button>
                            ${!user.isAdmin ? `<button class="btn btn-small btn-danger" onclick="deleteUser(${user.id})">–£–¥–∞–ª–∏—Ç—å</button>` : ''}
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
    
    container.innerHTML = tableHTML;
}

function addUser() {
    console.log('–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    const form = `
        <div class="form-group">
            <label>–ò–º—è:</label>
            <input type="text" id="user-name" class="form-input">
        </div>
        <div class="form-group">
            <label>–¢–µ–ª–µ—Ñ–æ–Ω:</label>
            <input type="text" id="user-phone" class="form-input">
        </div>
        <div class="form-group">
            <label>–ü–∞—Ä–æ–ª—å:</label>
            <input type="password" id="user-password" class="form-input">
        </div>
        <div class="form-group">
            <label>
                <input type="checkbox" id="user-can-create"> –ú–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã
            </label>
        </div>
        <div class="form-group">
            <label>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:</label>
            ${data.processes.map(p => `
                <label>
                    <input type="checkbox" value="${p.id}" class="process-checkbox"> ${p.name}
                </label>
            `).join('')}
        </div>
    `;
    
    showModal('–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', form, () => {
        const name = document.getElementById('user-name').value.trim();
        const phone = document.getElementById('user-phone').value.trim();
        const password = document.getElementById('user-password').value.trim();
        const canCreate = document.getElementById('user-can-create').checked;
        const processes = Array.from(document.querySelectorAll('.process-checkbox:checked')).map(cb => parseInt(cb.value));
        
        if (!name || !phone || !password) {
            alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
            return false;
        }
        
        const newUser = {
            id: Date.now(),
            name: name,
            phone: phone,
            password: password,
            isAdmin: false,
            canCreateOrders: canCreate,
            processes: processes
        };
        
        data.users.push(newUser);
        saveData();
        renderUsersTable();
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω:', newUser);
        return true;
    });
}

function editUser(userId) {
    const user = data.users.find(u => u.id === userId);
    if (!user) return;
    
    const form = `
        <div class="form-group">
            <label>–ò–º—è:</label>
            <input type="text" id="user-name" class="form-input" value="${user.name}">
        </div>
        <div class="form-group">
            <label>–¢–µ–ª–µ—Ñ–æ–Ω:</label>
            <input type="text" id="user-phone" class="form-input" value="${user.phone}">
        </div>
        <div class="form-group">
            <label>–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ):</label>
            <input type="password" id="user-password" class="form-input">
        </div>
        ${!user.isAdmin ? `
        <div class="form-group">
            <label>
                <input type="checkbox" id="user-can-create" ${user.canCreateOrders ? 'checked' : ''}> –ú–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã
            </label>
        </div>
        <div class="form-group">
            <label>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:</label>
            ${data.processes.map(p => `
                <label>
                    <input type="checkbox" value="${p.id}" class="process-checkbox" ${user.processes.includes(p.id) ? 'checked' : ''}> ${p.name}
                </label>
            `).join('')}
        </div>
        ` : ''}
    `;
    
    showModal('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', form, () => {
        user.name = document.getElementById('user-name').value.trim();
        user.phone = document.getElementById('user-phone').value.trim();
        
        const newPassword = document.getElementById('user-password').value.trim();
        if (newPassword) {
            user.password = newPassword;
        }
        
        if (!user.isAdmin) {
            user.canCreateOrders = document.getElementById('user-can-create').checked;
            user.processes = Array.from(document.querySelectorAll('.process-checkbox:checked')).map(cb => parseInt(cb.value));
        }
        
        saveData();
        renderUsersTable();
        return true;
    });
}

function deleteUser(userId) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) {
        data.users = data.users.filter(u => u.id !== userId);
        saveData();
        renderUsersTable();
    }
}

// === –ü–†–û–¶–ï–°–°–´ ===
function renderProcessesTable() {
    const container = document.getElementById('processes-table');
    if (!container) return;
    
    console.log('–†–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–æ—Ü–µ—Å—Å—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', data.processes.length);
    
    if (data.processes.length === 0) {
        container.innerHTML = '<p>–ù–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</p>';
        return;
    }
    
    const sortedProcesses = data.processes.sort((a, b) => a.order - b.order);
    
    const tableHTML = `
        <div class="table-header" style="margin-bottom: 16px; color: var(--gray-600); font-size: 0.875rem;">
            üìù –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–π—Ç–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
        </div>
        <table class="data-table">
            <thead>
                <tr>
                    <th style="width: 40px;">–ü–æ—Ä—è–¥–æ–∫</th>
                    <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                    <th style="width: 140px;">–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody id="processes-tbody">
                ${sortedProcesses.map((process, index) => `
                    <tr class="draggable-process-row" draggable="true" data-process-id="${process.id}" data-index="${index}">
                        <td>
                            <div class="drag-handle" style="cursor: move; color: var(--gray-400); font-size: 1.2em;">‚ò∞</div>
                        </td>
                        <td>${process.name}</td>
                        <td>
                            <button class="btn btn-small btn-secondary" onclick="editProcess(${process.id})">–ò–∑–º–µ–Ω–∏—Ç—å</button>
                            <button class="btn btn-small btn-danger" onclick="deleteProcess(${process.id})">–£–¥–∞–ª–∏—Ç—å</button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
    
    container.innerHTML = tableHTML;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag and drop
    initProcessDragAndDrop();
}

function addProcess() {
    const maxOrder = data.processes.length > 0 ? Math.max(...data.processes.map(p => p.order)) + 1 : 1;
    
    const form = `
        <div class="form-group">
            <label>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞:</label>
            <input type="text" id="process-name" class="form-input">
        </div>
        <div class="form-group">
            <label>–ü–æ—Ä—è–¥–æ–∫:</label>
            <input type="number" id="process-order" class="form-input" value="${maxOrder}">
        </div>
    `;
    
    showModal('–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å', form, () => {
        const name = document.getElementById('process-name').value.trim();
        const order = parseInt(document.getElementById('process-order').value);
        
        if (!name) {
            alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞');
            return false;
        }
        
        const newProcess = {
            id: Date.now(),
            name: name,
            order: order
        };
        
        data.processes.push(newProcess);
        saveData();
        renderProcessesTable();
        renderProductsTable(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–¥–µ–ª–∏—è —Ç–æ–∂–µ
        renderUsersTable(); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–æ–∂–µ
        console.log('–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω:', newProcess);
        return true;
    });
}

function editProcess(processId) {
    const process = data.processes.find(p => p.id === processId);
    if (!process) return;
    
    const form = `
        <div class="form-group">
            <label>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞:</label>
            <input type="text" id="process-name" class="form-input" value="${process.name}">
        </div>
        <div class="form-group">
            <label>–ü–æ—Ä—è–¥–æ–∫:</label>
            <input type="number" id="process-order" class="form-input" value="${process.order}">
        </div>
    `;
    
    showModal('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å', form, () => {
        process.name = document.getElementById('process-name').value.trim();
        process.order = parseInt(document.getElementById('process-order').value);
        
        saveData();
        renderProcessesTable();
        renderProductsTable(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–¥–µ–ª–∏—è —Ç–æ–∂–µ
        renderUsersTable(); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–æ–∂–µ
        return true;
    });
}

function deleteProcess(processId) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å? –û–Ω —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –≤—Å–µ—Ö –∏–∑–¥–µ–ª–∏–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')) {
        data.processes = data.processes.filter(p => p.id !== processId);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–¥–µ–ª–∏–π
        data.products.forEach(product => {
            product.processes = product.processes.filter(pid => pid !== processId);
        });
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        data.users.forEach(user => {
            user.processes = user.processes.filter(pid => pid !== processId);
        });
        
        saveData();
        renderAllTables();
    }
}

// === –ò–ó–î–ï–õ–ò–Ø ===
function renderProductsTable() {
    const container = document.getElementById('products-table');
    if (!container) return;
    
    console.log('–†–µ–Ω–¥–µ—Ä–∏–º –∏–∑–¥–µ–ª–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', data.products.length);
    
    if (data.products.length === 0) {
        container.innerHTML = '<p>–ù–µ—Ç –∏–∑–¥–µ–ª–∏–π</p>';
        return;
    }
    
    const tableHTML = `
        <table class="data-table">
            <thead>
                <tr>
                    <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                    <th>–ü—Ä–æ—Ü–µ—Å—Å—ã</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${data.products.map(product => `
                    <tr>
                        <td>${product.name}</td>
                        <td>${product.processes.map(pid => {
                            const process = data.processes.find(p => p.id === pid);
                            return process ? process.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
                        }).join(' ‚Üí ')}</td>
                        <td>
                            <button class="btn btn-small btn-secondary" onclick="editProduct(${product.id})">–ò–∑–º–µ–Ω–∏—Ç—å</button>
                            <button class="btn btn-small btn-danger" onclick="deleteProduct(${product.id})">–£–¥–∞–ª–∏—Ç—å</button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
    
    container.innerHTML = tableHTML;
}

function addProduct() {
    if (data.processes.length === 0) {
        alert('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã');
        return;
    }
    
    const form = `
        <div class="form-group">
            <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è:</label>
            <input type="text" id="product-name" class="form-input">
        </div>
        <div class="form-group">
            <label>–ü—Ä–æ—Ü–µ—Å—Å—ã (–≤—ã–±–µ—Ä–∏—Ç–µ –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ):</label>
            ${data.processes.sort((a, b) => a.order - b.order).map(p => `
                <label>
                    <input type="checkbox" value="${p.id}" class="product-process-checkbox"> ${p.name}
                </label>
            `).join('')}
        </div>
    `;
    
    showModal('–î–æ–±–∞–≤–∏—Ç—å –∏–∑–¥–µ–ª–∏–µ', form, () => {
        const name = document.getElementById('product-name').value.trim();
        const processes = Array.from(document.querySelectorAll('.product-process-checkbox:checked')).map(cb => parseInt(cb.value));
        
        if (!name) {
            alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è');
            return false;
        }
        
        if (processes.length === 0) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å');
            return false;
        }
        
        const newProduct = {
            id: Date.now(),
            name: name,
            processes: processes
        };
        
        data.products.push(newProduct);
        saveData();
        renderProductsTable();
        console.log('–ò–∑–¥–µ–ª–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ:', newProduct);
        return true;
    });
}

function editProduct(productId) {
    const product = data.products.find(p => p.id === productId);
    if (!product) return;
    
    const form = `
        <div class="form-group">
            <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è:</label>
            <input type="text" id="product-name" class="form-input" value="${product.name}">
        </div>
        <div class="form-group">
            <label>–ü—Ä–æ—Ü–µ—Å—Å—ã:</label>
            ${data.processes.sort((a, b) => a.order - b.order).map(p => `
                <label>
                    <input type="checkbox" value="${p.id}" class="product-process-checkbox" ${product.processes.includes(p.id) ? 'checked' : ''}> ${p.name}
                </label>
            `).join('')}
        </div>
    `;
    
    showModal('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–¥–µ–ª–∏–µ', form, () => {
        product.name = document.getElementById('product-name').value.trim();
        product.processes = Array.from(document.querySelectorAll('.product-process-checkbox:checked')).map(cb => parseInt(cb.value));
        
        if (product.processes.length === 0) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å');
            return false;
        }
        
        saveData();
        renderProductsTable();
        return true;
    });
}

function deleteProduct(productId) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –∏–∑–¥–µ–ª–∏–µ?')) {
        data.products = data.products.filter(p => p.id !== productId);
        saveData();
        renderProductsTable();
    }
}

// === –ó–ê–ö–ê–ó–´ ===
function renderOrdersTable() {
    const container = document.getElementById('orders-table');
    if (!container) return;
    
    console.log('–†–µ–Ω–¥–µ—Ä–∏–º –∑–∞–∫–∞–∑—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', data.orders.length);
    
    if (data.orders.length === 0) {
        container.innerHTML = '<p>–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>';
        return;
    }
    
    const tableHTML = `
        <table class="data-table">
            <thead>
                <tr>
                    <th>–ù–æ–º–µ—Ä</th>
                    <th>–ò–∑–¥–µ–ª–∏–µ</th>
                    <th>–ö–ª–∏–µ–Ω—Ç</th>
                    <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                    <th>–ü—Ä–æ—Ü–µ—Å—Å</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${data.orders.map(order => {
                    const product = data.products.find(p => p.id === order.productId);
                    const process = data.processes.find(p => p.id === order.currentProcessId);
                    return `
                        <tr>
                            <td>${order.number}</td>
                            <td>${product ? product.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</td>
                            <td>${order.customerName}</td>
                            <td>${order.customerPhone}</td>
                            <td>${process ? process.name : '–ó–∞–≤–µ—Ä—à–µ–Ω'}</td>
                            <td>
                                <button class="btn btn-small btn-secondary" onclick="editOrder(${order.id})">–ò–∑–º–µ–Ω–∏—Ç—å</button>
                                <button class="btn btn-small btn-danger" onclick="deleteOrder(${order.id})">–£–¥–∞–ª–∏—Ç—å</button>
                            </td>
                        </tr>
                    `;
                }).join('')}
            </tbody>
        </table>
    `;
    
    container.innerHTML = tableHTML;
}

function addOrder() {
    if (data.products.length === 0) {
        alert('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–∑–¥–µ–ª–∏—è');
        return;
    }
    
    const form = `
        <div class="form-group">
            <label>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</label>
            <input type="text" id="order-number" class="form-input" value="${generateOrderNumber()}">
        </div>
        <div class="form-group">
            <label>–ò–∑–¥–µ–ª–∏–µ:</label>
            <select id="order-product" class="form-input">
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ</option>
                ${data.products.map(p => `<option value="${p.id}">${p.name}</option>`).join('')}
            </select>
        </div>
        <div class="form-group">
            <label>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</label>
            <input type="text" id="order-customer" class="form-input">
        </div>
        <div class="form-group">
            <label>–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:</label>
            <input type="text" id="order-phone" class="form-input">
        </div>
        <div id="custom-fields"></div>
        <button type="button" class="btn btn-secondary btn-small" onclick="addCustomField()">+ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ</button>
    `;
    
    showModal('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑', form, () => {
        const number = document.getElementById('order-number').value.trim();
        const productId = parseInt(document.getElementById('order-product').value);
        const customerName = document.getElementById('order-customer').value.trim();
        const customerPhone = document.getElementById('order-phone').value.trim();
        
        if (!number || !productId || !customerName || !customerPhone) {
            alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
        if (data.orders.some(o => o.number === number)) {
            alert('–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return false;
        }
        
        const product = data.products.find(p => p.id === productId);
        if (!product || product.processes.length === 0) {
            alert('–£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑–¥–µ–ª–∏—è –Ω–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
            return false;
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
        const customFields = {};
        document.querySelectorAll('.custom-field-row').forEach(row => {
            const key = row.querySelector('.custom-field-key').value.trim();
            const value = row.querySelector('.custom-field-value').value.trim();
            if (key && value) {
                customFields[key] = value;
            }
        });
        
        const newOrder = {
            id: Date.now(),
            number: number,
            productId: productId,
            customerName: customerName,
            customerPhone: customerPhone,
            currentProcessId: product.processes[0], // –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
            customFields: customFields,
            createdAt: new Date().toISOString()
        };
        
        data.orders.push(newOrder);
        saveData();
        renderOrdersTable();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞
        if (typeof renderProcessBoard === 'function' && document.getElementById('processBoard')) {
            renderProcessBoard();
        }
        
        console.log('–ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω:', newOrder);
        return true;
    });
}

function editOrder(orderId) {
    const order = data.orders.find(o => o.id === orderId);
    if (!order) {
        console.error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω:', orderId);
        return;
    }
    
    console.log('–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑:', order);
    
    // –°–æ–∑–¥–∞—ë–º –ø–æ–ª—è –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π
    const customFieldsHtml = Object.entries(order.customFields || {}).map(([key, value]) => `
        <div class="custom-field-row" style="display: flex; gap: 10px; margin-bottom: 10px; align-items: center;">
            <input type="text" class="custom-field-key form-input" value="${key}" style="flex: 1;">
            <input type="text" class="custom-field-value form-input" value="${value}" style="flex: 1;">
            <button type="button" class="btn btn-danger btn-small" onclick="this.parentElement.remove()">√ó</button>
        </div>
    `).join('');
    
    const form = `
        <div class="form-group">
            <label>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</label>
            <input type="text" id="order-number" class="form-input" value="${order.number}">
        </div>
        <div class="form-group">
            <label>–ò–∑–¥–µ–ª–∏–µ:</label>
            <select id="order-product" class="form-input">
                ${data.products.map(p => `<option value="${p.id}" ${p.id === order.productId ? 'selected' : ''}>${p.name}</option>`).join('')}
            </select>
        </div>
        <div class="form-group">
            <label>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</label>
            <input type="text" id="order-customer" class="form-input" value="${order.customerName}">
        </div>
        <div class="form-group">
            <label>–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:</label>
            <input type="text" id="order-phone" class="form-input" value="${order.customerPhone}">
        </div>
        <div class="form-group">
            <label>–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å:</label>
            <select id="order-process" class="form-input">
                ${data.processes.map(p => `<option value="${p.id}" ${p.id === order.currentProcessId ? 'selected' : ''}>${p.name}</option>`).join('')}
                <option value="0" ${!order.currentProcessId ? 'selected' : ''}>–ó–∞–≤–µ—Ä—à–µ–Ω</option>
            </select>
        </div>
        <div class="form-group">
            <label>–ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è:</label>
            <div id="custom-fields">${customFieldsHtml}</div>
            <button type="button" class="btn btn-secondary btn-small" onclick="addCustomField()">+ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ</button>
        </div>
    `;
    
    showModal('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑', form, () => {
        try {
            const newNumber = document.getElementById('order-number').value.trim();
            const newProductId = parseInt(document.getElementById('order-product').value);
            const newCustomerName = document.getElementById('order-customer').value.trim();
            const newCustomerPhone = document.getElementById('order-phone').value.trim();
            
            if (!newNumber || !newProductId || !newCustomerName || !newCustomerPhone) {
                alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
                return false;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
            if (data.orders.some(o => o.number === newNumber && o.id !== order.id)) {
                alert('–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                return false;
            }
            
            // –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
            const customFields = {};
            document.querySelectorAll('.custom-field-row').forEach(row => {
                const key = row.querySelector('.custom-field-key').value.trim();
                const value = row.querySelector('.custom-field-value').value.trim();
                if (key && value) {
                    customFields[key] = value;
                }
            });
            
            order.number = newNumber;
            order.productId = newProductId;
            order.customerName = newCustomerName;
            order.customerPhone = newCustomerPhone;
            order.customFields = customFields;
            
            const processId = parseInt(document.getElementById('order-process').value);
            order.currentProcessId = processId === 0 ? null : processId;
            
            saveData();
            renderOrdersTable();
            
            if (typeof renderProcessBoard === 'function' && document.getElementById('processBoard')) {
                renderProcessBoard();
            }
            
            console.log('–ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω:', order);
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
            alert('–û—à–∏–±–∫–∞: ' + error.message);
            return false;
        }
    });
}

function deleteOrder(orderId) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑?')) {
        data.orders = data.orders.filter(o => o.id !== orderId);
        saveData();
        renderOrdersTable();
        
        if (typeof renderProcessBoard === 'function' && document.getElementById('processBoard')) {
            renderProcessBoard();
        }
    }
}

// === –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê ===
function showModal(title, content, onSave) {
    console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ:', title);
    
    // –£–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    closeModal();
    
    const modal = document.createElement('div');
    modal.className = 'modal show';
    
    // –ï—Å–ª–∏ onSave –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const footerButtons = onSave ? `
        <button class="btn btn-secondary" onclick="closeModal()">–û—Ç–º–µ–Ω–∞</button>
        <button class="btn btn-primary" id="modal-save-btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
    ` : `
        <button class="btn btn-secondary" onclick="closeModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
    `;
    
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>${title}</h3>
            </div>
            <div class="modal-body">
                ${content}
            </div>
            <div class="modal-footer">
                ${footerButtons}
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ onSave –ø–µ—Ä–µ–¥–∞–Ω)
    if (onSave) {
        const saveBtn = document.getElementById('modal-save-btn');
        if (saveBtn) {
            saveBtn.onclick = () => {
                try {
                    if (onSave()) {
                        closeModal();
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
                    alert('–û—à–∏–±–∫–∞: ' + error.message);
                }
            };
        }
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
    modal.onclick = (e) => {
        if (e.target === modal) {
            closeModal();
        }
    };
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
    const handleKeyDown = (e) => {
        if (e.key === 'Escape') {
            closeModal();
            document.removeEventListener('keydown', handleKeyDown);
        }
    };
    document.addEventListener('keydown', handleKeyDown);
}

function closeModal() {
    const modal = document.querySelector('.modal');
    if (modal) {
        modal.remove();
    }
}

// === –£–¢–ò–õ–ò–¢–´ ===

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ (–¥—É–±–ª–∏—Ä—É–µ–º –∏–∑ board.js)
function generateOrderNumber() {
    const today = new Date();
    const dateStr = today.getFullYear().toString().substr(-2) + 
                   (today.getMonth() + 1).toString().padStart(2, '0') + 
                   today.getDate().toString().padStart(2, '0');
    
    const existingNumbers = data.orders
        .map(o => o.number)
        .filter(n => n.startsWith(dateStr))
        .map(n => parseInt(n.split('-')[1]) || 0);
    
    const nextNumber = existingNumbers.length > 0 ? Math.max(...existingNumbers) + 1 : 1;
    
    return `${dateStr}-${nextNumber.toString().padStart(3, '0')}`;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è (–¥—É–±–ª–∏—Ä—É–µ–º –∏–∑ board.js)
function addCustomField() {
    const container = document.getElementById('custom-fields');
    if (!container) {
        console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä custom-fields –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    const fieldRow = document.createElement('div');
    fieldRow.className = 'custom-field-row';
    fieldRow.style.cssText = 'display: flex; gap: 10px; margin-bottom: 10px; align-items: center;';
    
    fieldRow.innerHTML = `
        <input type="text" class="custom-field-key form-input" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è" style="flex: 1;">
        <input type="text" class="custom-field-value form-input" placeholder="–ó–Ω–∞—á–µ–Ω–∏–µ" style="flex: 1;">
        <button type="button" class="btn btn-danger btn-small" onclick="this.parentElement.remove()">√ó</button>
    `;
    
    container.appendChild(fieldRow);
    console.log('–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
}

// Drag and Drop –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
function initProcessDragAndDrop() {
    const tbody = document.getElementById('processes-tbody');
    if (!tbody) return;
    
    let draggedElement = null;
    let draggedIndex = null;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç—Ä–æ–∫
    const rows = tbody.querySelectorAll('.draggable-process-row');
    
    rows.forEach((row, index) => {
        row.addEventListener('dragstart', (e) => {
            draggedElement = row;
            draggedIndex = index;
            row.style.opacity = '0.5';
            e.dataTransfer.effectAllowed = 'move';
        });
        
        row.addEventListener('dragend', (e) => {
            row.style.opacity = '1';
            draggedElement = null;
            draggedIndex = null;
            // –£–±–∏—Ä–∞–µ–º –≤—Å–µ highlight
            rows.forEach(r => r.style.backgroundColor = '');
        });
        
        row.addEventListener('dragover', (e) => {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
        });
        
        row.addEventListener('drop', (e) => {
            e.preventDefault();
            
            if (draggedElement && draggedElement !== row) {
                const targetIndex = parseInt(row.dataset.index);
                const draggedProcessId = parseInt(draggedElement.dataset.processId);
                const targetProcessId = parseInt(row.dataset.processId);
                
                // –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
                reorderProcesses(draggedProcessId, targetProcessId, draggedIndex, targetIndex);
            }
            
            // –£–±–∏—Ä–∞–µ–º highlight
            row.style.backgroundColor = '';
        });
        
        row.addEventListener('dragenter', (e) => {
            e.preventDefault();
            if (draggedElement !== row) {
                row.style.backgroundColor = 'var(--primary-light)';
            }
        });
        
        row.addEventListener('dragleave', (e) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ —ç–ª–µ–º–µ–Ω—Ç
            if (!row.contains(e.relatedTarget)) {
                row.style.backgroundColor = '';
            }
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
function reorderProcesses(draggedId, targetId, draggedIndex, targetIndex) {
    const draggedProcess = data.processes.find(p => p.id === draggedId);
    const targetProcess = data.processes.find(p => p.id === targetId);
    
    if (!draggedProcess || !targetProcess) return;
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫
    const sortedProcesses = data.processes.sort((a, b) => a.order - b.order);
    
    // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç
    sortedProcesses.splice(draggedIndex, 1);
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    sortedProcesses.splice(targetIndex, 0, draggedProcess);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    sortedProcesses.forEach((process, index) => {
        process.order = index + 1;
    });
    
    saveData();
    renderProcessesTable();
    renderProductsTable(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–¥–µ–ª–∏—è —Ç–æ–∂–µ
    renderUsersTable(); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–æ–∂–µ
    
    console.log('–ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω');
}

function createTestData() {
    if (!confirm('–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–æ–±–∞–≤–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã, –∏–∑–¥–µ–ª–∏—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')) return;
    
    // –ü—Ä–æ—Ü–µ—Å—Å—ã
    const processes = [
        { id: Date.now() + 1, name: '–ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–∞', order: 1 },
        { id: Date.now() + 2, name: '–ó–∞–º–µ—Ä', order: 2 },
        { id: Date.now() + 3, name: '–†–µ–∑–∫–∞', order: 3 },
        { id: Date.now() + 4, name: '–£–ø–∞–∫–æ–≤–∫–∞', order: 4 }
    ];
    
    // –ò–∑–¥–µ–ª–∏—è
    const products = [
        { id: Date.now() + 10, name: '–°—Ç–µ–∫–ª–æ', processes: [processes[0].id, processes[1].id, processes[2].id, processes[3].id] },
        { id: Date.now() + 11, name: '–ó–µ—Ä–∫–∞–ª–æ', processes: [processes[0].id, processes[2].id, processes[3].id] }
    ];
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const users = [
        {
            id: Date.now() + 20,
            name: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
            phone: '+7 111 111 1111',
            password: '1111',
            isAdmin: false,
            canCreateOrders: true,
            processes: [processes[0].id]
        },
        {
            id: Date.now() + 21,
            name: '–ú–∞—Å—Ç–µ—Ä —Ä–µ–∑–∫–∏',
            phone: '+7 222 222 2222',
            password: '2222',
            isAdmin: false,
            canCreateOrders: false,
            processes: [processes[2].id]
        }
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º
    data.processes.push(...processes);
    data.products.push(...products);
    data.users.push(...users);
    
    saveData();
    renderAllTables();
    alert('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!');
}

function clearAllData() {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!')) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞
        const admin = data.users.find(u => u.isAdmin);
        data.users = admin ? [admin] : [];
        data.processes = [];
        data.products = [];
        data.orders = [];
        
        saveData();
        renderAllTables();
        alert('–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
    }
}

// === –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê ===
function showModal(title, content, onSave) {
    console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ:', title);
    
    // –£–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    closeModal();
    
    const modal = document.createElement('div');
    modal.className = 'modal show';
    
    // –ï—Å–ª–∏ onSave –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const footerButtons = onSave ? `
        <button class="btn btn-secondary" onclick="closeModal()">–û—Ç–º–µ–Ω–∞</button>
        <button class="btn btn-primary" id="modal-save-btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
    ` : `
        <button class="btn btn-secondary" onclick="closeModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
    `;
    
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>${title}</h3>
            </div>
            <div class="modal-body">
                ${content}
            </div>
            <div class="modal-footer">
                ${footerButtons}
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ onSave –ø–µ—Ä–µ–¥–∞–Ω)
    if (onSave) {
        const saveBtn = document.getElementById('modal-save-btn');
        if (saveBtn) {
            saveBtn.onclick = () => {
                try {
                    if (onSave()) {
                        closeModal();
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
                    alert('–û—à–∏–±–∫–∞: ' + error.message);
                }
            };
        }
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
    modal.onclick = (e) => {
        if (e.target === modal) {
            closeModal();
        }
    };
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
    const handleKeyDown = (e) => {
        if (e.key === 'Escape') {
            closeModal();
            document.removeEventListener('keydown', handleKeyDown);
        }
    };
    document.addEventListener('keydown', handleKeyDown);
}

window.showModal = showModal;

function closeModal() {
    const modal = document.querySelector('.modal');
    if (modal) {
        modal.remove();
    }
}

window.closeModal = closeModal;