// –ú–æ–¥—É–ª—å –¥–æ—Å–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
const BoardModule = {
    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    showProcessBoard() {
        console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
        
        const mainContent = document.getElementById('mainContent');
        if (!mainContent) {
            console.error('mainContent –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const user = DataManager.getCurrentUser();
        if (!user) {
            console.error('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        const orders = DataManager.getOrders();
        const processes = DataManager.getProcesses();
        
        if (!orders || !processes) {
            console.warn('–î–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏');
            mainContent.innerHTML = `
                <div class="board-container">
                    <div class="process-board" style="padding: 40px; text-align: center;">
                        <div style="font-size: 24px; margin-bottom: 10px;">üîÑ</div>
                        <div>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
                        <div style="margin-top: 10px; font-size: 12px; color: #666;">
                            –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º...
                        </div>
                    </div>
                </div>
            `;
            
            // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(async () => {
                try {
                    await DataManager.load();
                    this.showProcessBoard(); // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
                }
            }, 2000);
            return;
        }

        const canCreate = user.isAdmin || user.canCreateOrders;
        
        console.log(`–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–æ—Å–∫—É: –ø—Ä–æ—Ü–µ—Å—Å–æ–≤=${processes.length}, –∑–∞–∫–∞–∑–æ–≤=${orders.length}`);
        
        mainContent.innerHTML = `
            <div class="board-container">
                ${canCreate ? `
                    <div class="board-header">
                        <button class="btn btn-primary" onclick="BoardModule.showAddOrderModal()">–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑</button>
                        <div class="board-stats">
                            <span>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}</span>
                            <span>–í —Ä–∞–±–æ—Ç–µ: ${orders.filter(o => o.currentProcessId).length}</span>
                            <span>–ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${orders.filter(o => !o.currentProcessId).length}</span>
                        </div>
                    </div>
                ` : ''}
                <div class="process-board" id="processBoard">
                    <div style="padding: 20px;">–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...</div>
                </div>
            </div>
        `;
        
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–æ—Å–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        this.renderProcessBoard();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        if (!this._clickHandlerAdded) {
            console.log('–î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤...');
            document.addEventListener('click', (event) => {
                const orderCard = event.target.closest('.order-card');
                if (orderCard && !this.draggedOrderId) {
                    const orderId = parseInt(orderCard.dataset.orderId);
                    if (orderId) {
                        this.showOrderDetails(orderId);
                    }
                }
            });
            this._clickHandlerAdded = true;
        }
    },

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–æ—Å–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤  
    renderProcessBoard() {
        console.log('–†–µ–Ω–¥–µ—Ä–∏–º –¥–æ—Å–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
        
        const processBoard = document.getElementById('processBoard');
        if (!processBoard) {
            console.error('processBoard –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        const processes = DataManager.getProcesses();
        const orders = DataManager.getOrders();
        const products = DataManager.getProducts();
        
        if (!processes || !orders || !products) {
            console.warn('–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –Ω–µ –≥–æ—Ç–æ–≤—ã:', { processes: !!processes, orders: !!orders, products: !!products });
            processBoard.innerHTML = `
                <div style="padding: 40px; text-align: center; color: #666;">
                    <div style="font-size: 24px; margin-bottom: 10px;">üîÑ</div>
                    <div>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...</div>
                </div>
            `;
            return;
        }
        
        const user = DataManager.getCurrentUser();
        if (!user) {
            console.error('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        const isAdmin = user.isAdmin;
        
        console.log(`–†–µ–Ω–¥–µ—Ä–∏–º: –ø—Ä–æ—Ü–µ—Å—Å–æ–≤=${processes.length}, –∑–∞–∫–∞–∑–æ–≤=${orders.length}, –∏–∑–¥–µ–ª–∏–π=${products.length}`);
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            const availableProcesses = isAdmin 
                ? processes 
                : processes.filter(p => user.processes.includes(p.id));
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
            const sortedProcesses = availableProcesses.sort((a, b) => a.order - b.order);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É "–ó–∞–≤–µ—Ä—à–µ–Ω–æ" –≤ –∫–æ–Ω–µ—Ü
            const allColumns = [...sortedProcesses];
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É "–ó–∞–≤–µ—Ä—à–µ–Ω–æ" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –∏–ª–∏ –µ—Å–ª–∏ –∞–¥–º–∏–Ω
            const hasAccessToLastProcess = isAdmin || processes.some(p => 
                user.processes.includes(p.id) && 
                products.some(prod => 
                    prod.processes.length > 0 && 
                    prod.processes[prod.processes.length - 1] === p.id
                )
            );
            
            if (hasAccessToLastProcess || isAdmin) {
                allColumns.push({ id: 0, name: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', order: 9999 });
            }
            
            if (allColumns.length === 0) {
                processBoard.innerHTML = `
                    <div style="padding: 40px; text-align: center; color: #666;">
                        <h3>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ü–µ—Å—Å–∞–º</h3>
                        <p>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞</p>
                    </div>
                `;
                return;
            }
            
            processBoard.innerHTML = allColumns.map(process => {
                // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
                let processOrders = orders.filter(order => {
                    if (process.id === 0) {
                        return !order.currentProcessId;
                    }
                    return order.currentProcessId === process.id;
                });
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if (!isAdmin) {
                    processOrders = processOrders.filter(order => {
                        const product = DataManager.findProduct(order.productId);
                        if (!product) return false;
                        
                        if (process.id === 0) {
                            const lastProcessId = product.processes[product.processes.length - 1];
                            return user.processes.includes(lastProcessId);
                        }
                        
                        return product.processes.includes(process.id);
                    });
                }
                
                return `
                    <div class="process-column" data-process-id="${process.id}"
                         ${isAdmin ? 'ondrop="BoardModule.handleDrop(event)" ondragover="BoardModule.handleDragOver(event)" ondragenter="BoardModule.handleDragEnter(event)" ondragleave="BoardModule.handleDragLeave(event)"' : ''}>
                        <div class="process-header">
                            <div class="process-title">${process.name}</div>
                            <div class="process-count">${processOrders.length} –∑–∞–∫–∞–∑–æ–≤</div>
                        </div>
                        <div class="process-items" id="process-${process.id}">
                            ${processOrders.length > 0 ? 
                                processOrders.map(order => this.renderOrderCard(order, isAdmin)).join('') :
                                '<div class="empty-state">–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</div>'
                            }
                        </div>
                    </div>
                `;
            }).join('');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:', error);
            processBoard.innerHTML = `
                <div style="padding: 20px; color: red;">
                    <h3>–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</h3>
                    <p>${error.message}</p>
                    <button onclick="BoardModule.renderProcessBoard()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                </div>
            `;
        }
    },

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞
    renderOrderCard(order, isAdmin) {
        try {
            const formattedDate = OrderUtils.formatDate(order.createdAt);
            const isDefective = order.defectInfo && order.defectInfo.isDefective;
            
            return `
                <div class="order-card" 
                     data-order-id="${order.id}"
                     ${isAdmin ? 'draggable="true"' : ''}
                     ${isAdmin ? 'ondragstart="BoardModule.handleDragStart(event)" ondragend="BoardModule.handleDragEnd(event)"' : ''}>
                    <div class="order-number">‚Ññ${order.number}</div>
                    <div class="order-customer">${order.customerName}</div>
                    ${isDefective ? `
                        <div style="font-size: 12px; color: #dc3545; font-weight: 600; margin: 4px 0;">
                            –ë–†–ê–ö: ${order.defectInfo.defectReason}
                        </div>
                    ` : ''}
                    <div class="order-created">
                        <small>${formattedDate.date}</small>
                    </div>
                </div>
            `;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞:', error);
            return `
                <div class="order-card" style="border-left: 4px solid red;">
                    <div>–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚Ññ${order?.number || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</div>
                </div>
            `;
        }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
    showOrderDetails(orderId) {
        const order = DataManager.findOrder(orderId);
        if (!order) {
            alert('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        const product = DataManager.findProduct(order.productId);
        const currentProcess = order.currentProcessId ? 
            DataManager.findProcess(order.currentProcessId) : null;
        
        const phoneDisplay = (order.customerPhone instanceof Phone) 
            ? order.customerPhone.getFormatted() 
            : (typeof order.customerPhone === 'string' ? PhoneUtils.formatPhone(order.customerPhone) : order.customerPhone);
        const phoneDialable = (order.customerPhone instanceof Phone) 
            ? order.customerPhone.getDialable() 
            : (typeof order.customerPhone === 'string' ? `+${PhoneUtils.getCleanPhone(order.customerPhone)}` : order.customerPhone);
        
        const orderInfo = `
            <div style="line-height: 1.6;">
                <p><strong>–ò–∑–¥–µ–ª–∏–µ:</strong> ${product ? product.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
                <p><strong>–ö–ª–∏–µ–Ω—Ç:</strong> ${order.customerName}</p>
                <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> <a href="tel:${phoneDialable}">${phoneDisplay}</a></p>
                <p><strong>–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å:</strong> ${currentProcess ? currentProcess.name : '–ó–∞–≤–µ—Ä—à–µ–Ω'}</p>
                <p><strong>–°–æ–∑–¥–∞–Ω:</strong> ${OrderUtils.formatDate(order.createdAt).full}</p>
                
                <div style="margin-top: 20px; display: flex; gap: 10px;">
                    <button class="btn btn-success" onclick="BoardModule.approveOrder(${order.id}); ModalModule.close();">
                        ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ
                    </button>
                    <button class="btn btn-danger" onclick="BoardModule.rejectOrder(${order.id});">
                        ‚ùå –û—Ç–±—Ä–∞–∫–æ–≤–∞—Ç—å
                    </button>
                </div>
            </div>
        `;
        
        ModalModule.show(`–ó–∞–∫–∞–∑ ‚Ññ${order.number}`, orderInfo, null);
    },

    // –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞
    approveOrder(orderId) {
        try {
            const order = DataManager.findOrder(orderId);
            if (!order) return;
            
            const newProcessId = OrderUtils.getNextProcess(order);
            DataManager.moveOrderToProcess(orderId, newProcessId || 0, '–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø');
            this.renderProcessBoard();
            
            const nextProcess = newProcessId ? DataManager.findProcess(newProcessId) : null;
            const message = nextProcess 
                ? `–ó–∞–∫–∞–∑ ‚Ññ${order.number} –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ —ç—Ç–∞–ø "${nextProcess.name}"`
                : `–ó–∞–∫–∞–∑ ‚Ññ${order.number} –∑–∞–≤–µ—Ä—à–µ–Ω`;
            
            alert(`‚úÖ ${message}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞');
        }
    },

    // –û—Ç–±—Ä–∞–∫–æ–≤–∫–∞ –∑–∞–∫–∞–∑–∞
    rejectOrder(orderId) {
        const order = DataManager.findOrder(orderId);
        if (!order) {
            alert('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const reason = prompt('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–±—Ä–∞–∫–æ–≤–∫–∏:');
        if (!reason || !reason.trim()) {
            return;
        }

        try {
            // –ü—Ä–æ—Å—Ç–∞—è –æ—Ç–±—Ä–∞–∫–æ–≤–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–¥–µ–ª–∏—è
            const product = DataManager.findProduct(order.productId);
            if (!product || !product.processes.length) {
                alert('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏–∑–¥–µ–ª–∏—è');
                return;
            }

            const targetProcessId = product.processes[0]; // –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
            DefectModule.sendOrderToDefect(orderId, targetProcessId, reason.trim(), true);
            this.renderProcessBoard();
            
            const targetProcess = DataManager.findProcess(targetProcessId);
            alert(`‚ùå –ó–∞–∫–∞–∑ ‚Ññ${order.number} –æ—Ç–±—Ä–∞–∫–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —ç—Ç–∞–ø "${targetProcess ? targetProcess.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–±—Ä–∞–∫–æ–≤–∫–∏:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–±—Ä–∞–∫–æ–≤–∫–µ –∑–∞–∫–∞–∑–∞');
        }
    },

    // Drag & Drop –¥–ª—è –∞–¥–º–∏–Ω–∞
    draggedOrderId: null,

    handleDragStart(event) {
        const orderCard = event.target.closest('.order-card');
        if (orderCard) {
            this.draggedOrderId = parseInt(orderCard.dataset.orderId);
            orderCard.style.opacity = '0.5';
            event.dataTransfer.effectAllowed = 'move';
        }
    },

    handleDragEnd(event) {
        const orderCard = event.target.closest('.order-card');
        if (orderCard) {
            orderCard.style.opacity = '1';
        }
        this.draggedOrderId = null;
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ü–∏–∏
        document.querySelectorAll('.process-column').forEach(col => {
            col.classList.remove('drag-over');
        });
    },

    handleDragOver(event) {
        event.preventDefault();
        event.dataTransfer.dropEffect = 'move';
    },

    handleDragEnter(event) {
        event.preventDefault();
        const processColumn = event.target.closest('.process-column');
        if (processColumn && this.draggedOrderId) {
            processColumn.classList.add('drag-over');
        }
    },

    handleDragLeave(event) {
        const processColumn = event.target.closest('.process-column');
        if (processColumn && !processColumn.contains(event.relatedTarget)) {
            processColumn.classList.remove('drag-over');
        }
    },

    handleDrop(event) {
        event.preventDefault();
        const processColumn = event.target.closest('.process-column');
        if (processColumn && this.draggedOrderId) {
            const targetProcessId = parseInt(processColumn.dataset.processId);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
            const order = DataManager.findOrder(this.draggedOrderId);
            if (order && order.currentProcessId !== targetProcessId) {
                this.moveOrderToProcess(this.draggedOrderId, targetProcessId);
            }
            
            processColumn.classList.remove('drag-over');
        }
    },

    // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å
    moveOrderToProcess(orderId, targetProcessId) {
        try {
            const order = DataManager.findOrder(orderId);
            if (!order) {
                console.error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω:', orderId);
                return;
            }

            const product = DataManager.findProduct(order.productId);
            if (!product) {
                console.error('–ò–∑–¥–µ–ª–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞:', order.productId);
                return;
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è: –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å
            const canMove = targetProcessId === 0 || product.processes.includes(targetProcessId);
            if (!canMove) {
                alert('–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–≥–ª–∞—Å–Ω–æ –º–∞—Ä—à—Ä—É—Ç—É –∏–∑–¥–µ–ª–∏—è');
                return;
            }

            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞–∫–∞–∑
            const success = DataManager.moveOrderToProcess(orderId, targetProcessId === 0 ? null : targetProcessId, '–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–º–µ—â–µ–Ω —á–µ—Ä–µ–∑ drag & drop');
            
            if (success) {
                this.renderProcessBoard();
                
                const targetProcess = targetProcessId === 0 ? null : DataManager.findProcess(targetProcessId);
                const message = targetProcess 
                    ? `–ó–∞–∫–∞–∑ ‚Ññ${order.number} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ "${targetProcess.name}"`
                    : `–ó–∞–∫–∞–∑ ‚Ññ${order.number} –∑–∞–≤–µ—Ä—à–µ–Ω`;
                
                console.log(message);
            } else {
                console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑');
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
        }
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
window.BoardModule = BoardModule;
console.log('‚úÖ BoardModule –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
