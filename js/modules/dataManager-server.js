// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö - —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
const DataManager = {
    // –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è)
    cache: {
        users: [],
        processes: [],
        products: [],
        orders: []
    },
    
    // API —Å–µ—Ä–≤–∏—Å
    api: null,
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    async init() {
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ APIService
        if (window.APIService) {
            this.api = window.APIService;
        } else {
            console.error('APIService –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return false;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        await this.loadFromServer();
        return true;
    },
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
    async loadFromServer() {
        try {
            console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const [users, processes, products, orders] = await Promise.all([
                this.api.getEntity('users'),
                this.api.getEntity('processes'),
                this.api.getEntity('products'),
                this.api.getEntity('orders')
            ]);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            this.cache.users = users || [];
            this.cache.processes = processes || [];
            this.cache.products = products || [];
            this.cache.orders = orders || [];
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
                users: this.cache.users.length,
                processes: this.cache.processes.length,
                products: this.cache.products.length,
                orders: this.cache.orders.length
            });
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≥—Ä—É–∑–∫–µ
            this.notifyDataChanged();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    },
    
    // === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ===
    getUsers() {
        return this.cache.users;
    },
    
    findUser(id) {
        return this.cache.users.find(user => user.id === parseInt(id));
    },
    
    async createUser(userData) {
        try {
            const newUser = await this.api.createEntity('users', userData);
            this.cache.users.push(newUser);
            this.notifyDataChanged();
            return newUser;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    },
    
    // === –ü–†–û–¶–ï–°–°–´ ===
    getProcesses() {
        return this.cache.processes;
    },
    
    findProcess(id) {
        return this.cache.processes.find(process => process.id === parseInt(id));
    },
    
    async createProcess(processData) {
        try {
            const newProcess = await this.api.createEntity('processes', processData);
            this.cache.processes.push(newProcess);
            this.notifyDataChanged();
            return newProcess;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞:', error);
            throw error;
        }
    },
    
    async updateProcess(id, processData) {
        try {
            await this.api.updateEntity('processes', id, processData);
            const index = this.cache.processes.findIndex(p => p.id === parseInt(id));
            if (index !== -1) {
                this.cache.processes[index] = { ...this.cache.processes[index], ...processData };
            }
            this.notifyDataChanged();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞:', error);
            throw error;
        }
    },
    
    // === –ò–ó–î–ï–õ–ò–Ø ===
    getProducts() {
        return this.cache.products;
    },
    
    findProduct(id) {
        return this.cache.products.find(product => product.id === parseInt(id));
    },
    
    async createProduct(productData) {
        try {
            const newProduct = await this.api.createEntity('products', productData);
            this.cache.products.push(newProduct);
            this.notifyDataChanged();
            return newProduct;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–¥–µ–ª–∏—è:', error);
            throw error;
        }
    },
    
    // === –ó–ê–ö–ê–ó–´ ===
    getOrders() {
        return this.cache.orders;
    },
    
    findOrder(id) {
        return this.cache.orders.find(order => order.id === parseInt(id));
    },
    
    async createOrder(orderData) {
        try {
            console.log('üìù –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', orderData);
            const newOrder = await this.api.createEntity('orders', orderData);
            this.cache.orders.push(newOrder);
            this.notifyDataChanged();
            console.log('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:', newOrder);
            return newOrder;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
            throw error;
        }
    },
    
    async updateOrder(id, orderData) {
        try {
            await this.api.updateEntity('orders', id, orderData);
            const index = this.cache.orders.findIndex(o => o.id === parseInt(id));
            if (index !== -1) {
                this.cache.orders[index] = { ...this.cache.orders[index], ...orderData };
            }
            this.notifyDataChanged();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
            throw error;
        }
    },
    
    async moveOrder(orderId, processId, reason, isDefect, userName) {
        try {
            console.log(`üîÑ –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞–∫–∞–∑ ${orderId} –≤ –ø—Ä–æ—Ü–µ—Å—Å ${processId}`);
            
            const result = await this.api.moveOrderToProcess(orderId, processId, reason, isDefect, userName);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            const orderIndex = this.cache.orders.findIndex(o => o.id === parseInt(orderId));
            if (orderIndex !== -1) {
                this.cache.orders[orderIndex].currentProcessId = processId === 0 ? null : processId;
                this.cache.orders[orderIndex].status = processId === 0 ? 'status-done' : 'status-process';
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
                if (!this.cache.orders[orderIndex].history) {
                    this.cache.orders[orderIndex].history = [];
                }
                
                this.cache.orders[orderIndex].history.push({
                    id: Date.now(),
                    timestamp: new Date().toISOString(),
                    type: isDefect ? 'defect_sent' : 'moved',
                    user: { name: userName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' },
                    data: {
                        fromProcess: null, // –ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                        toProcess: { id: processId, name: processId === 0 ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' : `–ü—Ä–æ—Ü–µ—Å—Å ${processId}` },
                        reason: reason,
                        isDefect: isDefect || false
                    }
                });
            }
            
            this.notifyDataChanged();
            console.log('‚úÖ –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–º–µ—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            return result;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
            throw error;
        }
    },
    
    // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
    getStats() {
        return {
            totalOrders: this.cache.orders.length,
            completedOrders: this.cache.orders.filter(o => o.status === 'status-done').length,
            activeOrders: this.cache.orders.filter(o => o.status !== 'status-done').length,
            totalUsers: this.cache.users.length,
            totalProcesses: this.cache.processes.length,
            totalProducts: this.cache.products.length
        };
    },
    
    // === –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===
    listeners: [],
    
    addListener(callback) {
        this.listeners.push(callback);
    },
    
    removeListener(callback) {
        const index = this.listeners.indexOf(callback);
        if (index > -1) {
            this.listeners.splice(index, 1);
        }
    },
    
    notifyDataChanged() {
        this.listeners.forEach(callback => {
            try {
                callback();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤ listener:', error);
            }
        });
    },
    
    // === –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï ===
    startAutoRefresh(intervalMs = 30000) { // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.stopAutoRefresh(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        
        this.refreshInterval = setInterval(async () => {
            try {
                console.log('üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
                await this.loadFromServer();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            }
        }, intervalMs);
        
        console.log(`üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ ${intervalMs/1000} —Å–µ–∫—É–Ω–¥`);
    },
    
    stopAutoRefresh() {
        if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
            this.refreshInterval = null;
            console.log('‚èπ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        }
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
window.DataManager = DataManager;

console.log('üìä DataManager (server-only) –∑–∞–≥—Ä—É–∂–µ–Ω');
