// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–∞–∫–∞
window.fixDefectOrderGlobal = function(orderId, comment) {
    console.log('üîß fixDefectOrderGlobal –≤—ã–∑–≤–∞–Ω–∞:', { orderId, comment });
    
    try {
        const order = DataManager.findOrder(orderId);
        if (!order || !order.defectInfo || !order.defectInfo.isDefective) {
            console.error('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤ –±—Ä–∞–∫–µ:', order);
            alert('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤ –±—Ä–∞–∫–µ');
            return;
        }
        
        console.log('üìã –ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞:', order.number);
        
        const currentProcess = DataManager.findProcess(order.currentProcessId);
        const originalProcess = DataManager.findProcess(order.defectInfo.originalProcessId);
        
        console.log('üîÑ –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å:', {
            –æ—Ç: currentProcess?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            –∫: originalProcess?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            currentProcessId: order.currentProcessId,
            originalProcessId: order.defectInfo.originalProcessId
        });
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π —ç—Ç–∞–ø
        order.currentProcessId = order.defectInfo.originalProcessId;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–∞–∫–µ
        order.defectInfo.isDefective = false;
        order.defectInfo.fixedDate = new Date().toISOString();
        order.defectInfo.fixedUser = DataManager.getCurrentUser() ? DataManager.getCurrentUser().name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        order.defectInfo.fixComment = comment;
        
        console.log('üíæ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞–∫–µ:', order.defectInfo);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        DataManager.addOrderHistoryEvent(orderId, APP_CONSTANTS.EVENT_TYPES.DEFECT_FIXED, {
            currentUser: DataManager.getCurrentUser(),
            fromProcess: currentProcess ? { id: currentProcess.id, name: currentProcess.name } : null,
            toProcess: originalProcess ? { id: originalProcess.id, name: originalProcess.name } : null,
            comment: comment // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–± —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–∏
        });
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        DataManager.save();
        
        console.log('‚úÖ –ë—Ä–∞–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞:', order.number);
        
        alert(`‚úÖ –ë—Ä–∞–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω. –ó–∞–∫–∞–∑ ‚Ññ${order.number} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–∞ —ç—Ç–∞–ø "${originalProcess ? originalProcess.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}".`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É
        if (typeof BoardModule.renderProcessBoard === 'function') {
            BoardModule.renderProcessBoard();
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–∞–∫–∞:', error);
        alert('–û—à–∏–±–∫–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–∞–∫–∞: ' + error.message);
    }
};

// –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–∞–∫–æ–º
const DefectModule = {
    // –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    testDefectFunction() {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!');
        alert('–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±—Ä–∞–∫ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    showDefectModal(orderId) {
        console.log('üéØ showDefectModal –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞:', orderId);
        
        try {
            const order = DataManager.findOrder(orderId);
            if (!order) {
                alert('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å ID: ' + orderId);
                return;
            }
            
            console.log('üìã –ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑:', order);
            
            const product = DataManager.findProduct(order.productId);
            if (!product) {
                alert('‚ùå –ò–∑–¥–µ–ª–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞');
                return;
            }
            
            console.log('üî® –ù–∞–π–¥–µ–Ω–æ –∏–∑–¥–µ–ª–∏–µ:', product);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            const availableProcesses = product.processes
                .filter(processId => processId !== order.currentProcessId)
                .map(processId => DataManager.findProcess(processId))
                .filter(process => process)
                .sort((a, b) => a.order - b.order);
            
            console.log('‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è –±—Ä–∞–∫–∞:', availableProcesses);
            
            if (availableProcesses.length === 0) {
                alert('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±—Ä–∞–∫');
                return;
            }
            
            const currentProcess = DataManager.findProcess(order.currentProcessId);
            
            const form = `
                <div style="margin-bottom: 16px; padding: 12px; background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px;">
                    <strong>‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –±—Ä–∞–∫</strong><br>
                    <small>–ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç—Ç–∞–ø –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã</small>
                </div>
                <div style="margin-bottom: 16px;">
                    <label style="display: block; margin-bottom: 4px; font-weight: bold;">–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:</label>
                    <textarea id="defect-reason" style="width: 100%; height: 80px; padding: 8px; border: 1px solid #ccc; border-radius: 4px;" placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω–µ —Ç–∞–∫ —Å –∑–∞–∫–∞–∑–æ–º..."></textarea>
                </div>
                <div style="margin-bottom: 16px;">
                    <label style="display: block; margin-bottom: 4px; font-weight: bold;">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —ç—Ç–∞–ø:</label>
                    <select id="defect-process" style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px;">
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø...</option>
                        ${availableProcesses.map(process => 
                            `<option value="${process.id}">${process.name}</option>`
                        ).join('')}
                    </select>
                    <small style="color: #666; margin-top: 4px; display: block;">
                        üí° –ó–∞–∫–∞–∑ –≤–µ—Ä–Ω–µ—Ç—Å—è –Ω–∞ —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø "${currentProcess ? currentProcess.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}" –ø–æ—Å–ª–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è
                    </small>
                </div>
            `;
            
            console.log('üé® –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ...');
            
            ModalModule.show('–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –±—Ä–∞–∫', form, () => {
                const reason = document.getElementById('defect-reason').value.trim();
                const targetProcessId = parseInt(document.getElementById('defect-process').value);
                
                console.log('üíæ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', { reason, targetProcessId });
                
                if (!reason) {
                    alert('–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –∑–∞–∫–∞–∑–æ–º');
                    return false;
                }
                
                if (!targetProcessId) {
                    alert('–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
                    return false;
                }
                
                this.sendOrderToDefect(orderId, targetProcessId, reason, false);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
                if (typeof BoardModule.renderProcessBoard === 'function') {
                    BoardModule.renderProcessBoard();
                }
                
                return true;
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ showDefectModal:', error);
            alert('–û—à–∏–±–∫–∞: ' + error.message);
        }
    },

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ –±—Ä–∞–∫
    sendOrderToDefect(orderId, targetProcessId, reason, isReject = false) {
        console.log('üì§ sendOrderToDefect –≤—ã–∑–≤–∞–Ω–∞:', { orderId, targetProcessId, reason, isReject });
        console.log('üîç –ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞:', {
            targetProcessIdType: typeof targetProcessId,
            targetProcessIdValue: targetProcessId,
            isTargetProcessIdValid: targetProcessId && !isNaN(targetProcessId) && targetProcessId > 0
        });
        
        try {
            const order = DataManager.findOrder(orderId);
            if (!order) {
                alert('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            const currentProcess = DataManager.findProcess(order.currentProcessId);
            
            // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–±—Ä–∞–∫–æ–≤–∫–∞ (reject) - –ø–µ—Ä–µ–º–µ—â–∞–µ–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç—Ç–∞–ø
            // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –±—Ä–∞–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –ø–µ—Ä–µ–º–µ—â–∞–µ–º –Ω–∞ –¥—Ä—É–≥–æ–π —ç—Ç–∞–ø
            let targetProcess;
            let newProcessId;
            
            if (isReject) {
                // –ü—Ä–∏ –æ—Ç–±—Ä–∞–∫–æ–≤–∫–µ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç—Ç–∞–ø
                newProcessId = targetProcessId;
                targetProcess = DataManager.findProcess(targetProcessId);
                console.log('üö´ –û—Ç–±—Ä–∞–∫–æ–≤–∫–∞: –ø–µ—Ä–µ–º–µ—â–∞–µ–º –Ω–∞ —ç—Ç–∞–ø "' + (targetProcess?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') + '"');
            } else {
                newProcessId = targetProcessId;
                targetProcess = DataManager.findProcess(targetProcessId);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–∞–∫–µ
            if (!order.defectInfo) {
                order.defectInfo = {};
            }
            
            // –ü—Ä–∏ –æ—Ç–±—Ä–∞–∫–æ–≤–∫–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ò–°–•–û–î–ù–´–ô –ø—Ä–æ—Ü–µ—Å—Å (—Ç–æ—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª –∑–∞–∫–∞–∑ –î–û –æ—Ç–±—Ä–∞–∫–æ–≤–∫–∏)
            if (isReject) {
                // –ü—Ä–∏ –æ—Ç–±—Ä–∞–∫–æ–≤–∫–µ originalProcessId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ–º, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–±—Ä–∞–∫–æ–≤–∞–ª–∏
                // –ù–û —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –µ—â–µ –Ω–µ –≤ –±—Ä–∞–∫–µ
                if (!order.defectInfo.isDefective) {
                    order.defectInfo.originalProcessId = order.currentProcessId;
                    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º originalProcessId –ø—Ä–∏ –æ—Ç–±—Ä–∞–∫–æ–≤–∫–µ:', order.currentProcessId);
                } else {
                    console.log('‚ö†Ô∏è –ó–∞–∫–∞–∑ —É–∂–µ –≤ –±—Ä–∞–∫–µ, –Ω–µ –∏–∑–º–µ–Ω—è–µ–º originalProcessId:', order.defectInfo.originalProcessId);
                }
            } else {
                // –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –±—Ä–∞–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
                if (!order.defectInfo.isDefective) {
                    order.defectInfo.originalProcessId = order.currentProcessId;
                    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º originalProcessId –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –±—Ä–∞–∫:', order.currentProcessId);
                }
            }
            
            order.defectInfo.isDefective = true;
            order.defectInfo.defectReason = reason;
            order.defectInfo.defectDate = new Date().toISOString();
            order.defectInfo.defectUser = DataManager.getCurrentUser() ? DataManager.getCurrentUser().name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            order.defectInfo.defectFromProcess = currentProcess ? currentProcess.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            order.defectInfo.isRejected = isReject; // –§–ª–∞–≥ –æ—Ç–±—Ä–∞–∫–æ–≤–∫–∏
            
            console.log('üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', order.defectInfo);
            
            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –Ω—É–∂–Ω—ã–π —ç—Ç–∞–ø
            const oldProcessId = order.currentProcessId;
            order.currentProcessId = newProcessId;
            
            console.log('üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:', {
                –∑–∞–∫–∞–∑: order.number,
                —Å—Ç–∞—Ä—ã–π_—ç—Ç–∞–ø: oldProcessId,
                –Ω–æ–≤—ã–π_—ç—Ç–∞–ø: newProcessId,
                –∏–º—è_—Å—Ç–∞—Ä–æ–≥–æ_—ç—Ç–∞–ø–∞: currentProcess?.name,
                –∏–º—è_–Ω–æ–≤–æ–≥–æ_—ç—Ç–∞–ø–∞: targetProcess?.name,
                –∑–∞–∫–∞–∑_–ø–æ—Å–ª–µ_–∏–∑–º–µ–Ω–µ–Ω–∏—è: {
                    id: order.id,
                    currentProcessId: order.currentProcessId,
                    isDefective: order.defectInfo?.isDefective
                }
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ç–∏–ø–æ–º
            const eventType = isReject ? APP_CONSTANTS.EVENT_TYPES.DEFECT_SENT : APP_CONSTANTS.EVENT_TYPES.DEFECT_SENT;
            DataManager.addOrderHistoryEvent(orderId, eventType, {
                currentUser: DataManager.getCurrentUser(),
                fromProcess: currentProcess ? { id: currentProcess.id, name: currentProcess.name } : null,
                toProcess: targetProcess ? { id: targetProcess.id, name: targetProcess.name } : null,
                reason: reason,
                isDefect: true
            });
            
            console.log('‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –±—Ä–∞–∫:', order);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            DataManager.save();
            
            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert –∑–¥–µ—Å—å, —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendOrderToDefect:', error);
            alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±—Ä–∞–∫: ' + error.message);
        }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–∞–∫–∞
    showDefectFixModal(orderId) {
        console.log('üîß showDefectFixModal –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞:', orderId);
        
        const order = DataManager.findOrder(orderId);
        if (!order || !order.defectInfo || !order.defectInfo.isDefective) {
            alert('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤ –±—Ä–∞–∫–µ');
            return;
        }
        
        console.log('üìã –ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ –≤ –±—Ä–∞–∫–µ:', order);
        
        const form = `
            <div style="margin-bottom: 16px; padding: 12px; background: #d1ecf1; border: 1px solid #bee5eb; border-radius: 8px;">
                <strong>üîß –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –±—Ä–∞–∫–∞</strong><br>
                <small>–ó–∞–∫–∞–∑ –≤–µ—Ä–Ω–µ—Ç—Å—è –Ω–∞ —ç—Ç–∞–ø "${order.defectInfo.defectFromProcess}" –ø–æ—Å–ª–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è</small>
            </div>
            <div style="margin-bottom: 16px;">
                <label style="display: block; margin-bottom: 4px; font-weight: bold;">–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞:</label>
                <div style="padding: 8px; background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 4px; color: #6c757d;">
                    ${order.defectInfo.defectReason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
                </div>
            </div>
            <div style="margin-bottom: 16px;">
                <label style="display: block; margin-bottom: 4px; font-weight: bold;">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–± —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–∏:</label>
                <textarea id="fix-comment" style="width: 100%; height: 80px; padding: 8px; border: 1px solid #ccc; border-radius: 4px; resize: vertical;" placeholder="–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã..." required></textarea>
            </div>
            <div style="text-align: center; margin-top: 20px;">
                <button type="button" class="btn btn-success" onclick="
                    const comment = document.getElementById('fix-comment').value.trim();
                    if (!comment) {
                        alert('–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è');
                        return;
                    }
                    console.log('üöÄ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–∞–∫–∞');
                    window.fixDefectOrderGlobal(${orderId}, comment);
                    ModalModule.close();
                " style="padding: 10px 20px;">
                    üîß –£—Å—Ç—Ä–∞–Ω–∏—Ç—å –±—Ä–∞–∫
                </button>
                <button type="button" class="btn btn-secondary" onclick="ModalModule.close();" style="padding: 10px 20px; margin-left: 10px;">
                    –û—Ç–º–µ–Ω–∞
                </button>
            </div>
        `;
        
        console.log('üé® –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–∞–∫–∞...');
        
        // –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±–µ–∑ callback
        ModalModule.show('–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –±—Ä–∞–∫–∞', form);
    },

    // –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –∑–∞–∫–∞–∑–∞
    fixDefectOrder(orderId, comment) {
        console.log('üîß fixDefectOrder –≤—ã–∑–≤–∞–Ω–∞:', { orderId, comment });
        
        try {
            const order = DataManager.findOrder(orderId);
            if (!order || !order.defectInfo || !order.defectInfo.isDefective) {
                console.error('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤ –±—Ä–∞–∫–µ:', order);
                alert('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤ –±—Ä–∞–∫–µ');
                return;
            }
            
            console.log('üìã –ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞:', order.number);
            
            const currentProcess = DataManager.findProcess(order.currentProcessId);
            const originalProcess = DataManager.findProcess(order.defectInfo.originalProcessId);
            
            console.log('üîÑ –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å:', {
                –æ—Ç: currentProcess?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                –∫: originalProcess?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                currentProcessId: order.currentProcessId,
                originalProcessId: order.defectInfo.originalProcessId,
                —Ä–∞–≤–Ω—ã_–ª–∏: order.currentProcessId === order.defectInfo.originalProcessId
            });
            
            // –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ - –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞–µ–º
            if (order.currentProcessId === order.defectInfo.originalProcessId) {
                console.log('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ó–∞–∫–∞–∑ —É–∂–µ –Ω–∞ —Ü–µ–ª–µ–≤–æ–º —ç—Ç–∞–ø–µ, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
            } else {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π —ç—Ç–∞–ø
                order.currentProcessId = order.defectInfo.originalProcessId;
                console.log('‚úÖ –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ —ç—Ç–∞–ø:', order.currentProcessId);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–∞–∫–µ
            order.defectInfo.isDefective = false;
            order.defectInfo.fixedDate = new Date().toISOString();
            order.defectInfo.fixedUser = DataManager.getCurrentUser() ? DataManager.getCurrentUser().name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            order.defectInfo.fixComment = comment;
            
            console.log('üíæ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞–∫–µ:', order.defectInfo);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            DataManager.addOrderHistoryEvent(orderId, APP_CONSTANTS.EVENT_TYPES.DEFECT_FIXED, {
                currentUser: DataManager.getCurrentUser(),
                fromProcess: currentProcess ? { id: currentProcess.id, name: currentProcess.name } : null,
                toProcess: originalProcess ? { id: originalProcess.id, name: originalProcess.name } : null,
                comment: comment // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–± —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–∏
            });
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            DataManager.save();
            
            console.log('‚úÖ –ë—Ä–∞–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞:', order);
            console.log('üîÑ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞:', {
                id: order.id,
                number: order.number,
                currentProcessId: order.currentProcessId,
                isDefective: order.defectInfo.isDefective
            });
            alert(`‚úÖ –ë—Ä–∞–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω. –ó–∞–∫–∞–∑ ‚Ññ${order.number} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–∞ —ç—Ç–∞–ø "${originalProcess ? originalProcess.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}".`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–∞–∫–∞:', error);
            alert('–û—à–∏–±–∫–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–∞–∫–∞: ' + error.message);
        }
    }
};

window.DefectModule = DefectModule;

// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å legacy –∫–æ–¥–æ–º
window.showDefectModal = (orderId) => DefectModule.showDefectModal(orderId);
window.sendOrderToDefectSimple = (orderId, targetProcessId, reason) => DefectModule.sendOrderToDefect(orderId, targetProcessId, reason);
window.showDefectFixModal = (orderId) => DefectModule.showDefectFixModal(orderId);
window.testDefectFunction = () => DefectModule.testDefectFunction();
