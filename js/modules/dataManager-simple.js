// –ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä–Ω—ã–π DataManager - –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è APIService
const DataManager = {
    // –î–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏ –∫–∞–∫ –∫—ç—à
    users: [],
    processes: [],
    products: [],
    orders: [],
    currentUser: null,
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    async init() {
        console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DataManager (server-only)...');
        
        if (!window.APIService) {
            console.error('APIService –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return false;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        try {
            await this.loadFromServer();
            console.log('‚úÖ DataManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DataManager:', error);
            return false;
        }
    },
    
    // === –û–ë–ù–û–í–õ–ï–ù–ò–ï UI ===
    
    notifyUIUpdate() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∫—É –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞
        if (window.AdminModule && typeof AdminModule.renderProcesses === 'function') {
            AdminModule.renderProcesses();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        if (window.BoardModule && typeof BoardModule.renderBoard === 'function') {
            BoardModule.renderBoard();
        }
        
        console.log('üîÑ UI –æ–±–Ω–æ–≤–ª–µ–Ω');
    },
    
    async addProcess(processData) {
        return await this.createProcess(processData);
    },
    
    async removeProcess(processId) {
        try {
            console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å:', processId);
            
            const response = await fetch(`${window.APIService.baseUrl}/processes/${processId}`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' }
            });
            
            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
                    this.processes = this.processes.filter(p => p.id !== parseInt(processId));
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI
                    this.notifyUIUpdate();
                    
                    console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω');
                    return result;
                }
            }
            
            throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞:', error);
            throw error;
        }
    },
    
    async updateProcess(processId, processData) {
        try {
            const response = await fetch(`${window.APIService.baseUrl}/processes/${processId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(processData)
            });
            
            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
                    const index = this.processes.findIndex(p => p.id === parseInt(processId));
                    if (index !== -1) {
                        this.processes[index] = { ...this.processes[index], ...processData };
                    }
                    
                    this.notifyUIUpdate();
                    return result;
                }
            }
            
            throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞:', error);
            throw error;
        }
    },
    
    // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ó APIService ===
    
    updateFromServer(serverData) {
        try {
            console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ APIService...');
            
            this.users = serverData.users || [];
            this.processes = serverData.processes || [];
            this.products = serverData.products || [];
            this.orders = serverData.orders || [];
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', {
                users: this.users.length,
                processes: this.processes.length,
                products: this.products.length,
                orders: this.orders.length
            });
            
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            return false;
        }
    },
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ APIService
    async loadFromServer() {
        try {
            console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ APIService...');
            
            const response = await fetch(window.APIService.baseUrl + '/data', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            });
            
            if (response.ok) {
                const result = await response.json();
                if (result.success && result.data) {
                    this.users = result.data.users || [];
                    this.processes = result.data.processes || [];
                    this.products = result.data.products || [];
                    this.orders = result.data.orders || [];
                    
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
                        users: this.users.length,
                        processes: this.processes.length,
                        products: this.products.length,
                        orders: this.orders.length
                    });
                } else {
                    console.log('‚ÑπÔ∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ');
                }
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', response.status);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    },
    
    // === –ú–ï–¢–û–î–´ –î–û–°–¢–£–ü–ê –ö –î–ê–ù–ù–´–ú ===
    
    getUsers() {
        return this.users;
    },
    
    findUser(id) {
        return this.users.find(user => user.id === parseInt(id));
    },
    
    getProcesses() {
        return this.processes;
    },
    
    findProcess(id) {
        return this.processes.find(process => process.id === parseInt(id));
    },
    
    getProducts() {
        return this.products;
    },
    
    findProduct(id) {
        return this.products.find(product => product.id === parseInt(id));
    },
    
    getOrders() {
        return this.orders;
    },
    
    findOrder(id) {
        return this.orders.find(order => order.id === parseInt(id));
    },
    
    // === –°–û–ó–î–ê–ù–ò–ï –î–ê–ù–ù–´–• ===
    
    async createOrder(orderData) {
        try {
            console.log('üìù –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑:', orderData);
            
            const response = await fetch(window.APIService.baseUrl + '/orders', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(orderData)
            });
            
            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
                    await this.loadFromServer();
                    console.log('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
                    return result;
                }
            }
            
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
            throw error;
        }
    },
    
    async createProcess(processData) {
        try {
            const response = await fetch(window.APIService.baseUrl + '/processes', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(processData)
            });
            
            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    const newProcess = { ...processData, id: result.id || Date.now() };
                    this.processes.push(newProcess);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI
                    this.notifyUIUpdate();
                    
                    console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω');
                    return result;
                }
            }
            
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞:', error);
            throw error;
        }
    },
    
    async createProduct(productData) {
        try {
            const response = await fetch(window.APIService.baseUrl + '/products', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(productData)
            });
            
            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    await this.loadFromServer();
                    return result;
                }
            }
            
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–¥–µ–ª–∏—è');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–¥–µ–ª–∏—è:', error);
            throw error;
        }
    },
    
    async createUser(userData) {
        try {
            const response = await fetch(window.APIService.baseUrl + '/users', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(userData)
            });
            
            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    await this.loadFromServer();
                    return result;
                }
            }
            
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    },
    
    // === –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –ó–ê–ö–ê–ó–û–í ===
    
    async moveOrder(orderId, processId, reason, isDefect, userName) {
        try {
            console.log(`üîÑ –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞–∫–∞–∑ ${orderId} –≤ –ø—Ä–æ—Ü–µ—Å—Å ${processId}`);
            
            const response = await fetch(`${window.APIService.baseUrl}/orders/${orderId}/move`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    processId,
                    reason,
                    isDefect,
                    userName
                })
            });
            
            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
                    const order = this.findOrder(orderId);
                    if (order) {
                        order.currentProcessId = processId === 0 ? null : processId;
                        order.status = processId === 0 ? 'status-done' : 'status-process';
                    }
                    
                    console.log('‚úÖ –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–º–µ—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                    return result;
                }
            }
            
            throw new Error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
            throw error;
        }
    },
    
    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú ===
    
    setCurrentUser(user) {
        this.currentUser = user;
        localStorage.setItem('currentUser', JSON.stringify(user));
    },
    
    getCurrentUser() {
        return this.currentUser;
    },
    
    clearCurrentUser() {
        this.currentUser = null;
        localStorage.removeItem('currentUser');
    },
    
    // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
    
    getStats() {
        return {
            totalOrders: this.orders.length,
            completedOrders: this.orders.filter(o => o.status === 'status-done').length,
            activeOrders: this.orders.filter(o => o.status !== 'status-done').length,
            totalUsers: this.users.length,
            totalProcesses: this.processes.length,
            totalProducts: this.products.length
        };
    },
    
    // === –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï ===
    
    startAutoRefresh(intervalMs = 30000) {
        if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
        }
        
        this.refreshInterval = setInterval(async () => {
            try {
                console.log('üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
                await this.loadFromServer();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                if (window.BoardModule && typeof BoardModule.renderBoard === 'function') {
                    BoardModule.renderBoard();
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            }
        }, intervalMs);
        
        console.log(`üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ ${intervalMs/1000} —Å–µ–∫—É–Ω–¥`);
    },
    
    stopAutoRefresh() {
        if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
            this.refreshInterval = null;
        }
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
window.DataManager = DataManager;

console.log('üìä DataManager (simplified server-only) –∑–∞–≥—Ä—É–∂–µ–Ω');
