// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –¥–∞–Ω–Ω—ã—Ö
class APIService {
    constructor() {
        this.baseUrl = this.getBaseUrl();
        this.isOnline = false;
        this.retryCount = 0;
        this.maxRetries = 3;
        
        console.log('üåê API Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –±–∞–∑–æ–≤—ã–π URL:', this.baseUrl);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        this.checkServerStatus();
        setInterval(() => this.checkServerStatus(), 15000); // –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
    }
    
    getBaseUrl() {
        const currentDomain = window.location.origin;
        if (currentDomain.includes('localhost') || currentDomain.includes('127.0.0.1')) {
            return 'http://localhost:3001/api';
        }
        return `${currentDomain}/api`;
    }
    
    async checkServerStatus() {
        try {
            const response = await fetch(`${this.baseUrl}/health`, {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' },
                timeout: 5000
            });
            
            if (response.ok) {
                const result = await response.json();
                if (result.success && !this.isOnline) {
                    console.log('üü¢ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º');
                    this.isOnline = true;
                    this.retryCount = 0;
                    this.showConnectionStatus(true);
                    
                    // –ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
                    await this.loadFromServer();
                }
                return true;
            }
        } catch (error) {
            if (this.isOnline) {
                console.log('üî¥ –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º');
                this.isOnline = false;
                this.showConnectionStatus(false);
            }
        }
        return false;
    }
    
    showConnectionStatus(online) {
        const existingIndicator = document.querySelector('.connection-status');
        if (existingIndicator) existingIndicator.remove();
        
        const indicator = document.createElement('div');
        indicator.className = `connection-status ${online ? 'online' : 'offline'}`;
        indicator.textContent = online ? 'üü¢ –û–Ω–ª–∞–π–Ω (–°–µ—Ä–≤–µ—Ä)' : 'üü° –ê–≤—Ç–æ–Ω–æ–º–Ω–æ (–ö—ç—à)';
        indicator.style.cssText = `
            position: fixed; top: 20px; right: 20px; z-index: 1000;
            padding: 8px 12px; border-radius: 4px; font-size: 12px;
            background: ${online ? '#d4edda' : '#fff3cd'};
            border: 1px solid ${online ? '#c3e6cb' : '#ffeaa7'};
            color: ${online ? '#155724' : '#856404'};
        `;
        document.body.appendChild(indicator);
        
        if (online) {
            setTimeout(() => {
                if (indicator.parentNode) {
                    indicator.style.opacity = '0';
                    setTimeout(() => indicator.remove(), 300);
                }
            }, 3000);
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
    async loadFromServer() {
        try {
            if (!this.isOnline) {
                console.log('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à');
                return false;
            }
            
            console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
            
            const response = await fetch(`${this.baseUrl}/data`, {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            });
            
            if (response.ok) {
                const result = await response.json();
                if (result.success && result.data) {
                    const serverData = result.data;
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥ DataManager –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    const success = DataManager.updateFromServer(serverData);
                    
                    if (success) {
                        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
                        console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${DataManager.getUsers().length}`);
                        console.log(`‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å–æ–≤: ${DataManager.getProcesses().length}`);
                        console.log(`üì¶ –ò–∑–¥–µ–ª–∏–π: ${DataManager.getProducts().length}`);
                        console.log(`üìã –ó–∞–∫–∞–∑–æ–≤: ${DataManager.getOrders().length}`);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º UI –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if (window.BoardModule && typeof BoardModule.renderBoard === 'function') {
                            BoardModule.renderBoard();
                        }
                        
                        return true;
                    }
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
            this.isOnline = false;
        }
        
        return false;
    }
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    async saveToServer() {
        if (!this.isOnline) {
            console.log('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –∫—ç—à');
            return false;
        }
        
        try {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
            
            const localData = {
                users: DataManager.getUsers(),
                processes: DataManager.getProcesses(),
                products: DataManager.getProducts(),
                orders: DataManager.getOrders()
            };
            
            const response = await fetch(`${this.baseUrl}/data`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(localData)
            });
            
            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
                    this.retryCount = 0;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                    DataManager.saveToCache();
                    return true;
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
            this.retryCount++;
            
            if (this.retryCount >= this.maxRetries) {
                this.isOnline = false;
                this.showConnectionStatus(false);
                console.log('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º');
            }
        }
        
        return false;
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    async forceSync() {
        if (!this.isOnline) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
            const serverAvailable = await this.checkServerStatus();
            if (!serverAvailable) {
                alert('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –î–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ.');
                return false;
            }
        }
        
        try {
            const indicator = document.createElement('div');
            indicator.style.cssText = `
                position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
                background: white; padding: 20px; border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15); z-index: 10001;
                text-align: center;
            `;
            indicator.innerHTML = `
                <div style="font-size: 24px; margin-bottom: 10px;">üîÑ</div>
                <div>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º...</div>
            `;
            document.body.appendChild(indicator);
            
            // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
            const loadSuccess = await this.loadFromServer();
            
            // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const saveSuccess = await this.saveToServer();
            
            indicator.remove();
            
            if (loadSuccess && saveSuccess) {
                alert('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
                return true;
            } else if (loadSuccess) {
                alert('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
                return true;
            } else if (saveSuccess) {
                alert('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
                return true;
            } else {
                alert('‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∞');
                return false;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
            alert('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
            return false;
        }
    }
    
    // –°–æ–∑–¥–∞—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    async createEntity(entityType, data) {
        if (!this.isOnline) {
            return false;
        }
        
        try {
            const response = await fetch(`${this.baseUrl}/${entityType}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
            
            if (response.ok) {
                const result = await response.json();
                return result.success ? result.id : false;
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${entityType}:`, error);
        }
        
        return false;
    }
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    async updateEntity(entityType, id, data) {
        if (!this.isOnline) {
            return false;
        }
        
        try {
            const response = await fetch(`${this.baseUrl}/${entityType}/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
            
            if (response.ok) {
                const result = await response.json();
                return result.success;
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${entityType}:`, error);
        }
        
        return false;
    }
    
    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑
    async moveOrder(orderId, processId, reason, isDefect, userName) {
        if (!this.isOnline) {
            return false;
        }
        
        try {
            const response = await fetch(`${this.baseUrl}/orders/${orderId}/move`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    processId,
                    reason,
                    isDefect,
                    userName
                })
            });
            
            if (response.ok) {
                const result = await response.json();
                return result.success;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        }
        
        return false;
    }
    
    getConnectionStatus() {
        return {
            online: this.isOnline,
            retryCount: this.retryCount,
            maxRetries: this.maxRetries
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
window.APIService = new APIService();
