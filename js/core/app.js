/**
 * –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
 */
class CRMApp {
    constructor() {
        this.initialized = false;
        this.currentUser = null;
        
        // –ú–µ–Ω–µ–¥–∂–µ—Ä—ã —Å—É—â–Ω–æ—Å—Ç–µ–π
        this.users = new UserManager();
        this.processes = new ProcessManager();
        this.products = new ProductManager();
        this.orders = new OrderManager();
        
        // API –∫–ª–∏–µ–Ω—Ç
        this.api = null;
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = {
            apiUrl: this.getApiUrl(),
            autoSyncInterval: 30000,
            debug: true
        };
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        this.syncState = {
            isOnline: false,
            lastSync: null,
            syncing: false
        };
        
        this.setupEventListeners();
    }

    getApiUrl() {
        if (window.APP_CONFIG && typeof window.APP_CONFIG.getApiUrl === 'function') {
            return window.APP_CONFIG.getApiUrl();
        }
        const currentDomain = window.location.origin;
        if (currentDomain.includes('localhost') || currentDomain.includes('127.0.0.1')) {
            return 'http://localhost:3001/api';
        }
        return `${currentDomain}/api`;
    }

    setupEventListeners() {
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö –¥–ª—è –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        [this.users, this.processes, this.products, this.orders].forEach(manager => {
            manager.addObserver((action, data) => {
                if (this.config.debug) {
                    console.log(`üîÑ ${manager.constructor.name}: ${action}`, data);
                }
                this.scheduleSync();
            });
        });
    }

    // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===

    async init() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CRM —Å–∏—Å—Ç–µ–º—ã...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
            await this.checkServerConnection();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            await this.loadData();
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.restoreUserSession();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            this.startAutoSync();
            
            this.initialized = true;
            console.log('‚úÖ CRM —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    async checkServerConnection() {
        try {
            const response = await fetch(`${this.config.apiUrl}/health`, {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            });
            
            if (response.ok) {
                const result = await response.json();
                this.syncState.isOnline = result.success;
                console.log('üåê –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
            } else {
                this.syncState.isOnline = false;
                console.warn('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        } catch (error) {
            this.syncState.isOnline = false;
            console.warn('‚ö†Ô∏è –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        }
    }

    async loadData() {
        try {
            console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞...');
            
            if (!this.syncState.isOnline) {
                console.log('üì± –†–∞–±–æ—Ç–∞–µ–º –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ');
                return;
            }

            const response = await fetch(`${this.config.apiUrl}/data`);
            if (response.ok) {
                const result = await response.json();
                if (result.success && result.data) {
                    this.users.loadFromArray(result.data.users || []);
                    this.processes.loadFromArray(result.data.processes || []);
                    this.products.loadFromArray(result.data.products || []);
                    this.orders.loadFromArray(result.data.orders || []);
                    
                    this.syncState.lastSync = new Date();
                    
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
                        users: this.users.count(),
                        processes: this.processes.count(),
                        products: this.products.count(),
                        orders: this.orders.count()
                    });
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    async saveData() {
        try {
            if (!this.syncState.isOnline || this.syncState.syncing) {
                return false;
            }

            this.syncState.syncing = true;
            console.log('üì§ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');

            const data = {
                users: this.users.toArray(),
                processes: this.processes.toArray(),
                products: this.products.toArray(),
                orders: this.orders.toArray()
            };

            const response = await fetch(`${this.config.apiUrl}/data`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    this.syncState.lastSync = new Date();
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
                    return true;
                }
            }
            
            return false;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
            return false;
        } finally {
            this.syncState.syncing = false;
        }
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ===

    async login(phone, password) {
        const user = this.users.authenticate(phone, password);
        if (user) {
            this.currentUser = user;
            localStorage.setItem('currentUser', JSON.stringify(user.toJSON()));
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.name);
            return user;
        }
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
    }

    logout() {
        this.currentUser = null;
        localStorage.removeItem('currentUser');
        this.stopAutoSync();
        console.log('üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    }

    restoreUserSession() {
        const userData = localStorage.getItem('currentUser');
        if (userData) {
            try {
                const data = JSON.parse(userData);
                this.currentUser = this.users.getById(data.id);
                if (this.currentUser) {
                    console.log('üîÑ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', this.currentUser.name);
                } else {
                    localStorage.removeItem('currentUser');
                }
            } catch (error) {
                localStorage.removeItem('currentUser');
            }
        }
    }

    getCurrentUser() {
        return this.currentUser;
    }

    isLoggedIn() {
        return !!this.currentUser;
    }

    // === –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø ===

    scheduleSync() {
        if (this.syncTimeout) {
            clearTimeout(this.syncTimeout);
        }
        this.syncTimeout = setTimeout(() => this.saveData(), 1000);
    }

    startAutoSync() {
        if (this.syncInterval) {
            clearInterval(this.syncInterval);
        }
        this.syncInterval = setInterval(() => {
            this.loadData();
        }, this.config.autoSyncInterval);
        console.log(`üîÑ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ (${this.config.autoSyncInterval/1000}—Å)`);
    }

    stopAutoSync() {
        if (this.syncInterval) {
            clearInterval(this.syncInterval);
            this.syncInterval = null;
        }
        if (this.syncTimeout) {
            clearTimeout(this.syncTimeout);
            this.syncTimeout = null;
        }
    }

    // === –£–¢–ò–õ–ò–¢–´ ===

    getStats() {
        return {
            users: this.users.count(),
            processes: this.processes.count(),
            products: this.products.count(),
            orders: this.orders.count(),
            completedOrders: this.orders.getCompleted().length,
            activeOrders: this.orders.getActive().length,
            isOnline: this.syncState.isOnline,
            lastSync: this.syncState.lastSync
        };
    }

    // === API –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –° –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú –ö–û–î–û–ú ===

    // DataManager compatibility
    getUsers() { return this.users.getAll(); }
    getProcesses() { return this.processes.getAll(); }
    getProducts() { return this.products.getAll(); }
    getOrders() { return this.orders.getAll(); }
    
    findUser(id) { return this.users.getById(id); }
    findProcess(id) { return this.processes.getById(id); }
    findProduct(id) { return this.products.getById(id); }
    findOrder(id) { return this.orders.getById(id); }
    
    async addProcess(data) {
        const process = this.processes.create(data);
        await this.saveEntityToServer('processes', process);
        return process;
    }
    
    async removeProcess(id) {
        const success = this.processes.delete(id);
        if (success) {
            await this.deleteEntityFromServer('processes', id);
        }
        return success;
    }
    
    async createOrder(data) {
        const order = this.orders.create(data);
        await this.saveEntityToServer('orders', order);
        return order;
    }
    
    async moveOrder(orderId, processId, moveData = {}) {
        const historyEntry = this.orders.moveOrder(orderId, processId, moveData);
        if (historyEntry) {
            const order = this.orders.getById(orderId);
            await this.updateEntityOnServer('orders', order);
        }
        return historyEntry;
    }
    
    // === –°–ï–†–í–ï–†–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò ===
    
    async saveEntityToServer(entityType, entity) {
        if (!this.syncState.isOnline) return false;
        
        try {
            const response = await fetch(`${this.config.apiUrl}/${entityType}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(entity.toJSON())
            });
            
            return response.ok;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${entityType}:`, error);
            return false;
        }
    }
    
    async updateEntityOnServer(entityType, entity) {
        if (!this.syncState.isOnline) return false;
        
        try {
            const response = await fetch(`${this.config.apiUrl}/${entityType}/${entity.id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(entity.toJSON())
            });
            
            return response.ok;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${entityType}:`, error);
            return false;
        }
    }
    
    async deleteEntityFromServer(entityType, id) {
        if (!this.syncState.isOnline) return false;
        
        try {
            const response = await fetch(`${this.config.apiUrl}/${entityType}/${id}`, {
                method: 'DELETE'
            });
            
            return response.ok;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${entityType}:`, error);
            return false;
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.CRMApp = CRMApp;
window.App = new CRMApp();

// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
window.DataManager = {
    // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—ã–∑–æ–≤—ã –∫ App
    init: () => App.init(),
    getUsers: () => App.getUsers(),
    getProcesses: () => App.getProcesses(),
    getProducts: () => App.getProducts(),
    getOrders: () => App.getOrders(),
    findUser: (id) => App.findUser(id),
    findProcess: (id) => App.findProcess(id),
    findProduct: (id) => App.findProduct(id),
    findOrder: (id) => App.findOrder(id),
    addProcess: (data) => App.addProcess(data),
    removeProcess: (id) => App.removeProcess(id),
    createOrder: (data) => App.createOrder(data),
    moveOrder: (orderId, processId, moveData) => App.moveOrder(orderId, processId, moveData),
    
    // –ú–µ—Ç–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setCurrentUser: (user) => { App.currentUser = user; },
    getCurrentUser: () => App.getCurrentUser(),
    clearCurrentUser: () => App.logout(),
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    getStats: () => App.getStats(),
    
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    startAutoRefresh: (interval) => {
        App.config.autoSyncInterval = interval;
        App.startAutoSync();
    },
    
    // UI –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    notifyUIUpdate: () => {
        if (window.AdminModule && typeof AdminModule.renderProcesses === 'function') {
            AdminModule.renderProcesses();
        }
        if (window.BoardModule && typeof BoardModule.renderBoard === 'function') {
            BoardModule.renderBoard();
        }
    },
    
    // –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    loadFromServer: async () => {
        try {
            if (App.initialized) {
                return await App.loadData();
            }
            return false;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
            return false;
        }
    },
    
    saveToServer: async () => {
        try {
            if (App.initialized) {
                return await App.saveData();
            }
            return false;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
            return false;
        }
    },
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
    updateFromServer: (serverData) => {
        try {
            if (!App.initialized) {
                console.warn('App –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
                return false;
            }
            
            if (serverData.users) {
                App.users.loadFromArray(serverData.users);
            }
            if (serverData.processes) {
                App.processes.loadFromArray(serverData.processes);
            }
            if (serverData.products) {
                App.products.loadFromArray(serverData.products);
            }
            if (serverData.orders) {
                App.orders.loadFromArray(serverData.orders);
            }
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ DataManager compatibility layer');
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            return false;
        }
    },
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    saveToCache: () => {
        // –í –Ω–æ–≤–æ–º —è–¥—Ä–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        console.log('‚ÑπÔ∏è –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –Ω–æ–≤–æ–º —è–¥—Ä–µ');
        return true;
    },
    
    loadFromCache: () => {
        // –í –Ω–æ–≤–æ–º —è–¥—Ä–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        console.log('‚ÑπÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
        return true;
    }
};

console.log('üéØ CRM App Core –∑–∞–≥—Ä—É–∂–µ–Ω');
