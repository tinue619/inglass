// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º - —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –Ω–æ–≤—ã–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º —è–¥—Ä–æ–º
class APIService {
    constructor() {
        this.baseUrl = this.getBaseUrl();
        this.isOnline = false;
        this.retryCount = 0;
        this.maxRetries = 3;
        
        console.log('üåê API Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –±–∞–∑–æ–≤—ã–π URL:', this.baseUrl);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        this.checkServerStatus();
        setInterval(() => this.checkServerStatus(), 15000); // –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
    }
    
    getBaseUrl() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if (window.APP_CONFIG && typeof window.APP_CONFIG.getApiUrl === 'function') {
            return window.APP_CONFIG.getApiUrl();
        }
        
        // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
        const currentDomain = window.location.origin;
        if (currentDomain.includes('localhost') || currentDomain.includes('127.0.0.1')) {
            return 'http://localhost:3001/api';
        }
        return `${currentDomain}/api`;
    }
    
    async checkServerStatus() {
        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 5000);
            
            const response = await fetch(`${this.baseUrl}/health`, {
                method: 'GET',
                headers: { 
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache'
                },
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    const wasOffline = !this.isOnline;
                    this.isOnline = true;
                    this.retryCount = 0;
                    
                    if (wasOffline) {
                        console.log('üü¢ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º');
                        this.showConnectionStatus(true);
                        
                        // –ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º—Å—è
                        if (window.App && window.App.initialized) {
                            await window.App.loadData();
                        }
                    }
                }
                return true;
            }
        } catch (error) {
            if (this.isOnline) {
                console.log('üî¥ –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º');
                this.isOnline = false;
                this.showConnectionStatus(false);
            }
        }
        return false;
    }
    
    showConnectionStatus(online) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        const existingIndicator = document.querySelector('.connection-status');
        if (existingIndicator) existingIndicator.remove();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —à–∞–ø–∫–µ
        const syncIcon = document.getElementById('syncIcon');
        const syncText = document.getElementById('syncText');
        const syncButton = syncIcon?.parentElement;
        
        if (syncButton) {
            if (online) {
                syncButton.style.backgroundColor = '#d4edda';
                syncButton.style.borderColor = '#c3e6cb';
                syncButton.style.color = '#155724';
                syncButton.title = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –∞–∫—Ç–∏–≤–Ω–æ';
            } else {
                syncButton.style.backgroundColor = '#fff3cd';
                syncButton.style.borderColor = '#ffeaa7';
                syncButton.style.color = '#856404';
                syncButton.title = '–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º - —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        if (online && !this.lastNotificationWasOnline) {
            this.showPopupNotification('üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', '#d4edda');
            this.lastNotificationWasOnline = true;
        } else if (!online && this.lastNotificationWasOnline !== false) {
            this.showPopupNotification('üî¥ –ü–æ—Ç–µ—Ä—è–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É', '#f8d7da');
            this.lastNotificationWasOnline = false;
        }
    }
    
    showPopupNotification(message, bgColor) {
        const notification = document.createElement('div');
        notification.className = 'popup-notification';
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed; top: 70px; right: 20px; z-index: 1000;
            padding: 12px 16px; border-radius: 6px; font-size: 14px;
            background: ${bgColor}; border: 1px solid rgba(0,0,0,0.1);
            color: #333; box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            transform: translateX(100%); transition: transform 0.3s ease;
        `;
        document.body.appendChild(notification);
        
        // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => notification.remove(), 300);
        }, 4000);
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å –Ω–æ–≤—ã–º —è–¥—Ä–æ–º
    async forceSync() {
        if (!this.isOnline) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
            const serverAvailable = await this.checkServerStatus();
            if (!serverAvailable) {
                alert('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –î–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ.');
                return false;
            }
        }
        
        try {
            const indicator = document.createElement('div');
            indicator.style.cssText = `
                position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
                background: white; padding: 20px; border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15); z-index: 10001;
                text-align: center;
            `;
            indicator.innerHTML = `
                <div style="font-size: 24px; margin-bottom: 10px;">üîÑ</div>
                <div>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º...</div>
            `;
            document.body.appendChild(indicator);
            
            let success = false;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–æ–µ —è–¥—Ä–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            if (window.App && window.App.initialized) {
                // –ù–æ–≤–æ–µ —è–¥—Ä–æ
                const loadSuccess = await window.App.loadData();
                const saveSuccess = await window.App.saveData();
                success = loadSuccess || saveSuccess;
            } else if (window.DataManager) {
                // Fallback –Ω–∞ —Å—Ç–∞—Ä–æ–µ API
                const loadSuccess = DataManager.loadFromServer ? await DataManager.loadFromServer() : false;
                const saveSuccess = DataManager.saveToServer ? await DataManager.saveToServer() : false;
                success = loadSuccess || saveSuccess;
            }
            
            indicator.remove();
            
            if (success) {
                alert('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                if (window.BoardModule && typeof BoardModule.renderBoard === 'function') {
                    BoardModule.renderBoard();
                }
                if (window.AdminModule && typeof AdminModule.renderProcesses === 'function') {
                    AdminModule.renderProcesses();
                }
                
                return true;
            } else {
                alert('‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å');
                return false;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
            alert('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
            return false;
        }
    }
    
    getConnectionStatus() {
        return {
            online: this.isOnline,
            retryCount: this.retryCount,
            maxRetries: this.maxRetries
        };
    }
    
    // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
    async loadFromServer() {
        if (window.App && window.App.initialized) {
            return await window.App.loadData();
        }
        return false;
    }
    
    async saveToServer() {
        if (window.App && window.App.initialized) {
            return await window.App.saveData();
        }
        return false;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
window.APIService = new APIService();
