const sqlite3 = require('sqlite3').verbose();
const bcrypt = require('bcrypt');
const path = require('path');

const DB_PATH = path.join(__dirname, 'inglass.db');

console.log('üóÑÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite...');

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database(DB_PATH, (err) => {
    if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
        process.exit(1);
    }
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
});

// SQL —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
const createTables = `
-- –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    phone TEXT UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    is_admin BOOLEAN DEFAULT FALSE,
    can_create_orders BOOLEAN DEFAULT FALSE,
    processes TEXT DEFAULT '[]', -- JSON –º–∞—Å—Å–∏–≤ ID –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
CREATE TABLE IF NOT EXISTS processes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    order_num INTEGER NOT NULL,
    description TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- –¢–∞–±–ª–∏—Ü–∞ –∏–∑–¥–µ–ª–∏–π
CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    processes TEXT DEFAULT '[]', -- JSON –º–∞—Å—Å–∏–≤ ID –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    description TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
CREATE TABLE IF NOT EXISTS orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    client_name TEXT NOT NULL,
    client_contacts TEXT DEFAULT '[]', -- JSON –º–∞—Å—Å–∏–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    product_id INTEGER,
    product_name TEXT,
    quantity TEXT,
    size TEXT,
    thickness TEXT,
    comment TEXT,
    current_process_id INTEGER,
    status TEXT DEFAULT 'status-process',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products (id),
    FOREIGN KEY (current_process_id) REFERENCES processes (id)
);

-- –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
CREATE TABLE IF NOT EXISTS order_history (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    order_id INTEGER NOT NULL,
    event_type TEXT NOT NULL,
    user_name TEXT,
    from_process_id INTEGER,
    from_process_name TEXT,
    to_process_id INTEGER,
    to_process_name TEXT,
    reason TEXT,
    comment TEXT,
    is_defect BOOLEAN DEFAULT FALSE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (order_id) REFERENCES orders (id) ON DELETE CASCADE,
    FOREIGN KEY (from_process_id) REFERENCES processes (id),
    FOREIGN KEY (to_process_id) REFERENCES processes (id)
);

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
CREATE INDEX IF NOT EXISTS idx_users_phone ON users(phone);
CREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status);
CREATE INDEX IF NOT EXISTS idx_orders_current_process ON orders(current_process_id);
CREATE INDEX IF NOT EXISTS idx_order_history_order_id ON order_history(order_id);
CREATE INDEX IF NOT EXISTS idx_order_history_created_at ON order_history(created_at);

-- –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE TRIGGER IF NOT EXISTS update_users_timestamp 
    AFTER UPDATE ON users
    BEGIN
        UPDATE users SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
    END;

CREATE TRIGGER IF NOT EXISTS update_processes_timestamp 
    AFTER UPDATE ON processes
    BEGIN
        UPDATE processes SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
    END;

CREATE TRIGGER IF NOT EXISTS update_products_timestamp 
    AFTER UPDATE ON products
    BEGIN
        UPDATE products SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
    END;

CREATE TRIGGER IF NOT EXISTS update_orders_timestamp 
    AFTER UPDATE ON orders
    BEGIN
        UPDATE orders SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
    END;
`;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL —Å–∫—Ä–∏–ø—Ç–∞
function executeSqlScript(sql) {
    return new Promise((resolve, reject) => {
        db.exec(sql, (err) => {
            if (err) {
                reject(err);
            } else {
                resolve();
            }
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function createAdminUser() {
    return new Promise((resolve, reject) => {
        const adminPassword = '1488';
        bcrypt.hash(adminPassword, 10, (err, hash) => {
            if (err) {
                reject(err);
                return;
            }

            const adminUser = {
                name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                phone: '+7 777 777 7777',
                password_hash: hash,
                is_admin: true,
                can_create_orders: true,
                processes: '[]'
            };

            const sql = `
                INSERT OR REPLACE INTO users 
                (id, name, phone, password_hash, is_admin, can_create_orders, processes)
                VALUES (1, ?, ?, ?, ?, ?, ?)
            `;

            db.run(sql, [
                adminUser.name,
                adminUser.phone,
                adminUser.password_hash,
                adminUser.is_admin,
                adminUser.can_create_orders,
                adminUser.processes
            ], function(err) {
                if (err) {
                    reject(err);
                } else {
                    console.log('üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω (ID: 1)');
                    resolve();
                }
            });
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function createTestData() {
    return new Promise(async (resolve, reject) => {
        try {
            console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
            const processes = [
                { name: '–ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–∞', order_num: 1 },
                { name: '–ó–∞–º–µ—Ä', order_num: 2 },
                { name: '–†–µ–∑–∫–∞ —Å—Ç–µ–∫–ª–∞', order_num: 3 },
                { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–æ–º–∫–∏', order_num: 4 },
                { name: '–£–ø–∞–∫–æ–≤–∫–∞', order_num: 5 }
            ];

            for (const process of processes) {
                await new Promise((res, rej) => {
                    db.run(
                        'INSERT OR REPLACE INTO processes (name, order_num) VALUES (?, ?)',
                        [process.name, process.order_num],
                        function(err) {
                            if (err) rej(err);
                            else res();
                        }
                    );
                });
            }

            // –°–æ–∑–¥–∞–µ–º –∏–∑–¥–µ–ª–∏—è
            const products = [
                { name: '–°—Ç–µ–∫–ª–æ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ', processes: '[1,2,3,4,5]' },
                { name: '–ó–µ—Ä–∫–∞–ª–æ', processes: '[1,2,3,5]' },
                { name: '–°—Ç–µ–∫–ª–æ–ø–∞–∫–µ—Ç', processes: '[1,2,3,4,5]' }
            ];

            for (const product of products) {
                await new Promise((res, rej) => {
                    db.run(
                        'INSERT OR REPLACE INTO products (name, processes) VALUES (?, ?)',
                        [product.name, product.processes],
                        function(err) {
                            if (err) rej(err);
                            else res();
                        }
                    );
                });
            }

            // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const users = [
                {
                    name: '–ú–µ–Ω–µ–¥–∂–µ—Ä –ê–Ω–Ω–∞',
                    phone: '+7 111 111 1111',
                    password: '1111',
                    is_admin: false,
                    can_create_orders: true,
                    processes: '[1]'
                },
                {
                    name: '–ú–∞—Å—Ç–µ—Ä –ò–≤–∞–Ω',
                    phone: '+7 222 222 2222',
                    password: '2222',
                    is_admin: false,
                    can_create_orders: false,
                    processes: '[2,3]'
                }
            ];

            for (const user of users) {
                const hash = await new Promise((res, rej) => {
                    bcrypt.hash(user.password, 10, (err, hash) => {
                        if (err) rej(err);
                        else res(hash);
                    });
                });

                await new Promise((res, rej) => {
                    db.run(
                        'INSERT OR REPLACE INTO users (name, phone, password_hash, is_admin, can_create_orders, processes) VALUES (?, ?, ?, ?, ?, ?)',
                        [user.name, user.phone, hash, user.is_admin, user.can_create_orders, user.processes],
                        function(err) {
                            if (err) rej(err);
                            else res();
                        }
                    );
                });
            }

            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã');
            resolve();

        } catch (error) {
            reject(error);
        }
    });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function initializeDatabase() {
    try {
        console.log('üî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...');
        await executeSqlScript(createTables);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã');

        console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
        await createAdminUser();

        console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        await createTestData();

        console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
        console.log(`üìç –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${DB_PATH}`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    } finally {
        db.close((err) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err.message);
            } else {
                console.log('üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
            }
            process.exit(0);
        });
    }
}

// –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
initializeDatabase();
