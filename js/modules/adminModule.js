// –ú–æ–¥—É–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è - –∫—Ä–∞—Ç–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
const AdminModule = {
    showAdminPanel() {
        const mainContent = document.getElementById('mainContent');
        mainContent.innerHTML = `
            <div class="admin-panel">
                <h2>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h2>
                <div style="margin-bottom: 20px;">
                    <button class="btn btn-success" onclick="AdminModule.createTestData()">üé≠ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</button>
                    <button class="btn btn-warning" onclick="AdminModule.clearAllData()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ</button>
                </div>
                
                <div class="admin-tabs">
                    <button class="tab-btn active" onclick="AdminModule.switchTab('users')">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</button>
                    <button class="tab-btn" onclick="AdminModule.switchTab('processes')">–ü—Ä–æ—Ü–µ—Å—Å—ã</button>
                    <button class="tab-btn" onclick="AdminModule.switchTab('products')">–ò–∑–¥–µ–ª–∏—è</button>
                    <button class="tab-btn" onclick="AdminModule.switchTab('orders')">–ó–∞–∫–∞–∑—ã</button>
                </div>
                
                <div id="tab-users" class="tab-content active">
                    <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
                    <button class="btn btn-primary" onclick="AdminModule.addUser()">–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</button>
                    <div id="users-table"></div>
                </div>
                
                <div id="tab-processes" class="tab-content">
                    <h3>–ü—Ä–æ—Ü–µ—Å—Å—ã</h3>
                    <button class="btn btn-primary" onclick="AdminModule.addProcess()">–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å</button>
                    <div id="processes-table"></div>
                </div>
                
                <div id="tab-products" class="tab-content">
                    <h3>–ò–∑–¥–µ–ª–∏—è</h3>
                    <button class="btn btn-primary" onclick="AdminModule.addProduct()">–î–æ–±–∞–≤–∏—Ç—å –∏–∑–¥–µ–ª–∏–µ</button>
                    <div id="products-table"></div>
                </div>
                
                <div id="tab-orders" class="tab-content">
                    <h3>–ó–∞–∫–∞–∑—ã</h3>
                    <button class="btn btn-primary" onclick="BoardModule.showAddOrderModal()">–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑</button>
                    <div id="orders-table"></div>
                </div>
            </div>
        `;
        setTimeout(() => this.renderAllTables(), 100);
    },

    switchTab(tabName) {
        document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
        document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
        if (event && event.target) event.target.classList.add('active');
        document.getElementById('tab-' + tabName).classList.add('active');
    },

    renderAllTables() {
        this.renderUsersTable();
        this.renderProcessesTable();
        this.renderProductsTable();
        this.renderOrdersTable();
    },

    renderUsersTable() {
        const container = document.getElementById('users-table');
        if (!container) return;
        
        const users = DataManager.getUsers();
        if (users.length === 0) {
            container.innerHTML = '<p>–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>';
            return;
        }
        
        container.innerHTML = `
            <table class="data-table">
                <thead>
                    <tr><th>–ò–º—è</th><th>–¢–µ–ª–µ—Ñ–æ–Ω</th><th>–¢–∏–ø</th><th>–î–µ–π—Å—Ç–≤–∏—è</th></tr>
                </thead>
                <tbody>
                    ${users.map(user => `
                        <tr>
                            <td>${user.name}</td>
                            <td>${PhoneUtils.formatPhone(user.phone)}</td>
                            <td>${user.isAdmin ? '–ê–¥–º–∏–Ω' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</td>
                            <td>
                                <button class="btn btn-small btn-secondary" onclick="AdminModule.editUser(${user.id})">–ò–∑–º–µ–Ω–∏—Ç—å</button>
                                ${!user.isAdmin ? `<button class="btn btn-small btn-danger" onclick="AdminModule.deleteUser(${user.id})">–£–¥–∞–ª–∏—Ç—å</button>` : ''}
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
    },

    addUser() {
        const form = `
            <div class="form-group">
                <label>–ò–º—è:</label>
                <input type="text" id="user-name" class="form-input">
            </div>
            <div class="form-group">
                <label>–¢–µ–ª–µ—Ñ–æ–Ω:</label>
                <input type="text" id="user-phone" class="form-input">
            </div>
            <div class="form-group">
                <label>–ü–∞—Ä–æ–ª—å:</label>
                <input type="password" id="user-password" class="form-input">
            </div>
            <div class="form-group">
                <label><input type="checkbox" id="user-can-create"> –ú–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã</label>
            </div>
            <div class="form-group">
                <label>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:</label>
                ${DataManager.getProcesses().map(p => `
                    <label><input type="checkbox" value="${p.id}" class="process-checkbox"> ${p.name}</label>
                `).join('')}
            </div>
        `;
        
        ModalModule.show('–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', form, () => {
            const name = document.getElementById('user-name').value.trim();
            const phone = document.getElementById('user-phone').value.trim();
            const password = document.getElementById('user-password').value.trim();
            const canCreate = document.getElementById('user-can-create').checked;
            const processes = Array.from(document.querySelectorAll('.process-checkbox:checked')).map(cb => parseInt(cb.value));
            
            if (!name || !phone || !password) {
                alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
                return false;
            }
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if (!PhoneUtils.isValidPhone(phone)) {
                alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
                return false;
            }
            
            DataManager.addUser({
                id: Date.now(),
                name, 
                phone: PhoneUtils.formatPhone(phone), // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
                password,
                isAdmin: false,
                canCreateOrders: canCreate,
                processes
            });
            this.renderUsersTable();
            return true;
        });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        setTimeout(() => {
            const phoneInput = document.getElementById('user-phone');
            if (phoneInput && typeof PhoneUtils !== 'undefined' && PhoneUtils.applyMask) {
                PhoneUtils.applyMask(phoneInput);
            }
        }, 100);
    },

    editUser(userId) {
        const user = DataManager.findUser(userId);
        if (!user) return;
        
        const form = `
            <div class="form-group">
                <label>–ò–º—è:</label>
                <input type="text" id="user-name" class="form-input" value="${user.name}">
            </div>
            <div class="form-group">
                <label>–¢–µ–ª–µ—Ñ–æ–Ω:</label>
                <input type="text" id="user-phone" class="form-input" value="${user.phone}">
            </div>
            <div class="form-group">
                <label>–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º):</label>
                <input type="password" id="user-password" class="form-input">
            </div>
            ${!user.isAdmin ? `
            <div class="form-group">
                <label><input type="checkbox" id="user-can-create" ${user.canCreateOrders ? 'checked' : ''}> –ú–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã</label>
            </div>
            <div class="form-group">
                <label>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:</label>
                ${DataManager.getProcesses().map(p => `
                    <label><input type="checkbox" value="${p.id}" class="process-checkbox" ${user.processes.includes(p.id) ? 'checked' : ''}> ${p.name}</label>
                `).join('')}
            </div>
            ` : ''}
        `;
        
        ModalModule.show('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', form, () => {
            const newName = document.getElementById('user-name').value.trim();
            const newPhone = document.getElementById('user-phone').value.trim();
            
            if (!newName || !newPhone) {
                alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
                return false;
            }
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if (!PhoneUtils.isValidPhone(newPhone)) {
                alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
                return false;
            }
            
            user.name = newName;
            user.phone = PhoneUtils.formatPhone(newPhone); // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
            
            const newPassword = document.getElementById('user-password').value.trim();
            if (newPassword) user.password = newPassword;
            
            if (!user.isAdmin) {
                user.canCreateOrders = document.getElementById('user-can-create').checked;
                user.processes = Array.from(document.querySelectorAll('.process-checkbox:checked')).map(cb => parseInt(cb.value));
            }
            
            DataManager.save();
            this.renderUsersTable();
            return true;
        });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        setTimeout(() => {
            const phoneInput = document.getElementById('user-phone');
            if (phoneInput && typeof PhoneUtils !== 'undefined' && PhoneUtils.applyMask) {
                PhoneUtils.applyMask(phoneInput);
            }
        }, 100);
    },

    deleteUser(userId) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) {
            DataManager.removeUser(userId);
            this.renderUsersTable();
        }
    },

    renderProcessesTable() {
        const container = document.getElementById('processes-table');
        if (!container) return;
        
        const processes = DataManager.getProcesses().sort((a, b) => a.order - b.order);
        if (processes.length === 0) {
            container.innerHTML = '<p>–ù–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</p>';
            return;
        }
        
        container.innerHTML = `
            <table class="data-table">
                <thead>
                    <tr><th>–ü–æ—Ä—è–¥–æ–∫</th><th>–ù–∞–∑–≤–∞–Ω–∏–µ</th><th>–î–µ–π—Å—Ç–≤–∏—è</th></tr>
                </thead>
                <tbody>
                    ${processes.map(process => `
                        <tr>
                            <td>${process.order}</td>
                            <td>${process.name}</td>
                            <td>
                                <button class="btn btn-small btn-secondary" onclick="AdminModule.editProcess(${process.id})">–ò–∑–º–µ–Ω–∏—Ç—å</button>
                                <button class="btn btn-small btn-danger" onclick="AdminModule.deleteProcess(${process.id})">–£–¥–∞–ª–∏—Ç—å</button>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
    },

    addProcess() {
        const maxOrder = DataManager.getProcesses().length > 0 ? Math.max(...DataManager.getProcesses().map(p => p.order)) + 1 : 1;
        
        const form = `
            <div class="form-group">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞:</label>
                <input type="text" id="process-name" class="form-input">
            </div>
            <div class="form-group">
                <label>–ü–æ—Ä—è–¥–æ–∫:</label>
                <input type="number" id="process-order" class="form-input" value="${maxOrder}">
            </div>
        `;
        
        ModalModule.show('–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å', form, () => {
            const name = document.getElementById('process-name').value.trim();
            const order = parseInt(document.getElementById('process-order').value);
            
            if (!name) {
                alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞');
                return false;
            }
            
            DataManager.addProcess({ id: Date.now(), name, order });
            this.renderAllTables();
            return true;
        });
    },

    editProcess(processId) {
        const process = DataManager.findProcess(processId);
        if (!process) return;
        
        const form = `
            <div class="form-group">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞:</label>
                <input type="text" id="process-name" class="form-input" value="${process.name}">
            </div>
            <div class="form-group">
                <label>–ü–æ—Ä—è–¥–æ–∫:</label>
                <input type="number" id="process-order" class="form-input" value="${process.order}">
            </div>
        `;
        
        ModalModule.show('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å', form, () => {
            process.name = document.getElementById('process-name').value.trim();
            process.order = parseInt(document.getElementById('process-order').value);
            DataManager.save();
            this.renderAllTables();
            return true;
        });
    },

    deleteProcess(processId) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å? –û–Ω —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –≤—Å–µ—Ö –∏–∑–¥–µ–ª–∏–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')) {
            DataManager.removeProcess(processId);
            this.renderAllTables();
        }
    },

    renderProductsTable() {
        const container = document.getElementById('products-table');
        if (!container) return;
        
        const products = DataManager.getProducts();
        if (products.length === 0) {
            container.innerHTML = '<p>–ù–µ—Ç –∏–∑–¥–µ–ª–∏–π</p>';
            return;
        }
        
        container.innerHTML = `
            <table class="data-table">
                <thead>
                    <tr><th>–ù–∞–∑–≤–∞–Ω–∏–µ</th><th>–ü—Ä–æ—Ü–µ—Å—Å—ã</th><th>–î–µ–π—Å—Ç–≤–∏—è</th></tr>
                </thead>
                <tbody>
                    ${products.map(product => `
                        <tr>
                            <td>${product.name}</td>
                            <td>${product.processes.map(pid => {
                                const process = DataManager.findProcess(pid);
                                return process ? process.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
                            }).join(' ‚Üí ')}</td>
                            <td>
                                <button class="btn btn-small btn-secondary" onclick="AdminModule.editProduct(${product.id})">–ò–∑–º–µ–Ω–∏—Ç—å</button>
                                <button class="btn btn-small btn-danger" onclick="AdminModule.deleteProduct(${product.id})">–£–¥–∞–ª–∏—Ç—å</button>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
    },

    addProduct() {
        if (DataManager.getProcesses().length === 0) {
            alert('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã');
            return;
        }
        
        const form = `
            <div class="form-group">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è:</label>
                <input type="text" id="product-name" class="form-input">
            </div>
            <div class="form-group">
                <label>–ü—Ä–æ—Ü–µ—Å—Å—ã:</label>
                ${DataManager.getProcesses().sort((a, b) => a.order - b.order).map(p => `
                    <label><input type="checkbox" value="${p.id}" class="product-process-checkbox"> ${p.name}</label>
                `).join('')}
            </div>
        `;
        
        ModalModule.show('–î–æ–±–∞–≤–∏—Ç—å –∏–∑–¥–µ–ª–∏–µ', form, () => {
            const name = document.getElementById('product-name').value.trim();
            const processes = Array.from(document.querySelectorAll('.product-process-checkbox:checked')).map(cb => parseInt(cb.value));
            
            if (!name) {
                alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è');
                return false;
            }
            if (processes.length === 0) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å');
                return false;
            }
            
            DataManager.addProduct({ id: Date.now(), name, processes });
            this.renderProductsTable();
            return true;
        });
    },

    editProduct(productId) {
        const product = DataManager.findProduct(productId);
        if (!product) return;
        
        const form = `
            <div class="form-group">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è:</label>
                <input type="text" id="product-name" class="form-input" value="${product.name}">
            </div>
            <div class="form-group">
                <label>–ü—Ä–æ—Ü–µ—Å—Å—ã:</label>
                ${DataManager.getProcesses().sort((a, b) => a.order - b.order).map(p => `
                    <label><input type="checkbox" value="${p.id}" class="product-process-checkbox" ${product.processes.includes(p.id) ? 'checked' : ''}> ${p.name}</label>
                `).join('')}
            </div>
        `;
        
        ModalModule.show('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–¥–µ–ª–∏–µ', form, async () => {
            const newName = document.getElementById('product-name').value.trim();
            const newProcesses = Array.from(document.querySelectorAll('.product-process-checkbox:checked')).map(cb => parseInt(cb.value));
            
            if (!newName) {
                alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è');
                return false;
            }
            if (newProcesses.length === 0) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å');
                return false;
            }
            
            console.log('üîß –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–¥–µ–ª–∏–µ:', productId, { name: newName, processes: newProcesses });
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const success = await DataManager.updateProduct(productId, {
                name: newName,
                processes: newProcesses
            });
            
            if (success) {
                this.renderProductsTable();
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
                if (typeof BoardModule.renderProcessBoard === 'function' && document.getElementById('processBoard')) {
                    BoardModule.renderProcessBoard();
                }
                console.log('‚úÖ –ò–∑–¥–µ–ª–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
                return true;
            } else {
                alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–¥–µ–ª–∏—è');
                return false;
            }
        });
    },

    deleteProduct(productId) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å –∏–∑–¥–µ–ª–∏–µ?')) {
            DataManager.removeProduct(productId);
            this.renderProductsTable();
        }
    },

    renderOrdersTable() {
        const container = document.getElementById('orders-table');
        if (!container) return;
        
        const orders = DataManager.getOrders();
        if (orders.length === 0) {
            container.innerHTML = '<p>–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>';
            return;
        }
        
        container.innerHTML = `
            <table class="data-table">
                <thead>
                    <tr><th>–ù–æ–º–µ—Ä</th><th>–ò–∑–¥–µ–ª–∏–µ</th><th>–ö–ª–∏–µ–Ω—Ç</th><th>–ü—Ä–æ—Ü–µ—Å—Å</th><th>–î–µ–π—Å—Ç–≤–∏—è</th></tr>
                </thead>
                <tbody>
                    ${orders.map(order => {
                        const product = DataManager.findProduct(order.productId);
                        const process = DataManager.findProcess(order.currentProcessId);
                        return `
                            <tr>
                                <td>${order.number}</td>
                                <td>${product ? product.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</td>
                                <td>${order.customerName}</td>
                                <td>${process ? process.name : '–ó–∞–≤–µ—Ä—à–µ–Ω'}</td>
                                <td>
                                    <button class="btn btn-small btn-secondary" onclick="BoardModule.showOrderDetails(${order.id})">–î–µ—Ç–∞–ª–∏</button>
                                    <button class="btn btn-small btn-danger" onclick="AdminModule.deleteOrder(${order.id})">–£–¥–∞–ª–∏—Ç—å</button>
                                </td>
                            </tr>
                        `;
                    }).join('')}
                </tbody>
            </table>
        `;
    },

    deleteOrder(orderId) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑?')) {
            DataManager.removeOrder(orderId);
            this.renderOrdersTable();
            if (typeof BoardModule.renderProcessBoard === 'function' && document.getElementById('processBoard')) {
                BoardModule.renderProcessBoard();
            }
        }
    },

    createTestData() {
        if (!confirm('–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ?')) return;
        DataManager.createTestData();
        this.renderAllTables();
        alert('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!');
    },

    clearAllData() {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!')) return;
        DataManager.clearAll();
        this.renderAllTables();
        alert('–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
    }
};

window.AdminModule = AdminModule;

// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å legacy –∫–æ–¥–æ–º
window.showAdminPanel = () => AdminModule.showAdminPanel();
window.switchTab = (tabName) => AdminModule.switchTab(tabName);
window.createTestData = () => AdminModule.createTestData();
window.clearAllData = () => AdminModule.clearAllData();
