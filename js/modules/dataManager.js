// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Å —Å–µ—Ä–≤–µ—Ä–æ–º –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º)
const DataManager = {
    _data: {
        users: [APP_CONSTANTS.DEFAULTS.ADMIN_USER],
        processes: [],
        products: [],
        orders: [],
        currentUser: null
    },
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π (—Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
    async updateUser(id, updatedData) {
        const user = this.findUser(id);
        if (!user) {
            console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', id);
            return false;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        Object.assign(user, updatedData);
        user.id = id; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID
        
        this.saveToCache();
        await this.syncWithServer();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–æ—á–Ω—É—é —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
        this.validateReferentialIntegrity();
        
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${user.name}" –æ–±–Ω–æ–≤–ª–µ–Ω`);
        return true;
    },
    
    async updateProcess(id, updatedData) {
        const process = this.findProcess(id);
        if (!process) {
            console.error('–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', id);
            return false;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        Object.assign(process, updatedData);
        process.id = id; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID
        
        this.saveToCache();
        await this.syncWithServer();
        
        console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å "${process.name}" –æ–±–Ω–æ–≤–ª–µ–Ω`);
        return true;
    },
    
    async updateProduct(id, updatedData) {
        const product = this.findProduct(id);
        if (!product) {
            console.error('–ò–∑–¥–µ–ª–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', id);
            return false;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        Object.assign(product, updatedData);
        product.id = id; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if (Array.isArray(product.processes)) {
            const validProcesses = product.processes.filter(processId => {
                const process = this.findProcess(processId);
                if (!process) {
                    console.warn(`‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å ID=${processId} –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–¥–µ–ª–∏—è "${product.name}"`);
                    return false;
                }
                return true;
            });
            
            if (validProcesses.length !== product.processes.length) {
                console.log(`üîß –ü—Ä–æ—Ü–µ—Å—Å—ã –∏–∑–¥–µ–ª–∏—è "${product.name}" –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã: ${product.processes.length} -> ${validProcesses.length}`);
                product.processes = validProcesses;
            }
        }
        
        this.saveToCache();
        await this.syncWithServer();
        
        console.log(`‚úÖ –ò–∑–¥–µ–ª–∏–µ "${product.name}" –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
        return true;
    },
    
    async updateOrder(id, updatedData) {
        const order = this.findOrder(id);
        if (!order) {
            console.error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', id);
            return false;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        Object.assign(order, updatedData);
        order.id = id; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID
        
        this.saveToCache();
        await this.syncWithServer();
        
        console.log(`‚úÖ –ó–∞–∫–∞–∑ "${order.number}" –æ–±–Ω–æ–≤–ª–µ–Ω`);
        return true;
    },

    // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç undefined)
    getUsers() { 
        if (!this._data.users || !Array.isArray(this._data.users)) {
            console.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            this._data.users = [APP_CONSTANTS.DEFAULTS.ADMIN_USER];
        }
        return this._data.users;
    },
    
    getProcesses() { 
        if (!this._data.processes || !Array.isArray(this._data.processes)) {
            console.warn('–ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
            this._data.processes = [];
        }
        return this._data.processes;
    },
    
    getProducts() { 
        if (!this._data.products || !Array.isArray(this._data.products)) {
            console.warn('–ò–∑–¥–µ–ª–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
            this._data.products = [];
        }
        return this._data.products;
    },
    
    getOrders() { 
        if (!this._data.orders || !Array.isArray(this._data.orders)) {
            console.warn('–ó–∞–∫–∞–∑—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
            this._data.orders = [];
        }
        return this._data.orders;
    },
    
    getCurrentUser() { return this._data.currentUser; },

    // –°–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    setCurrentUser(user) { this._data.currentUser = user; },

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
    updateFromServer(serverData) {
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
        
        try {
            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –º–∞—Å—Å–∏–≤–æ–≤
            if (serverData.users && Array.isArray(serverData.users)) {
                this._data.users = [...serverData.users];
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${this._data.users.length}`);
            } else {
                console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞');
            }
            
            if (serverData.processes && Array.isArray(serverData.processes)) {
                this._data.processes = [...serverData.processes];
                console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${this._data.processes.length}`);
            } else {
                console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞');
                this._data.processes = [];
            }
            
            if (serverData.products && Array.isArray(serverData.products)) {
                this._data.products = [...serverData.products];
                console.log(`‚úÖ –ò–∑–¥–µ–ª–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${this._data.products.length}`);
            } else {
                console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–¥–µ–ª–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞');
                this._data.products = [];
            }
            
            if (serverData.orders && Array.isArray(serverData.orders)) {
                this._data.orders = [...serverData.orders];
                console.log(`‚úÖ –ó–∞–∫–∞–∑—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${this._data.orders.length}`);
            } else {
                console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞');
                this._data.orders = [];
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
            this.ensureAdminExists();
            
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            this.validateData();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            this.saveToCache();
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
            return false;
        }
    },

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π (—Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
    async addUser(user) { 
        this._data.users.push(user);
        this.saveToCache();
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        if (window.APIService && window.APIService.isOnline) {
            const serverId = await window.APIService.createEntity('users', user);
            if (serverId) {
                user.id = serverId;
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å ID:', serverId);
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        await this.syncWithServer();
    },
    
    async addProcess(process) { 
        this._data.processes.push(process);
        this.saveToCache();
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        if (window.APIService && window.APIService.isOnline) {
            const serverId = await window.APIService.createEntity('processes', process);
            if (serverId) {
                process.id = serverId;
                console.log('–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å ID:', serverId);
            }
        }
        
        await this.syncWithServer();
    },
    
    async addProduct(product) { 
        this._data.products.push(product);
        this.saveToCache();
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        if (window.APIService && window.APIService.isOnline) {
            const serverId = await window.APIService.createEntity('products', product);
            if (serverId) {
                product.id = serverId;
                console.log('–ò–∑–¥–µ–ª–∏–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å ID:', serverId);
            }
        }
        
        await this.syncWithServer();
    },
    
    async addOrder(order) { 
        this._data.orders.push(order);
        this.saveToCache();
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        if (window.APIService && window.APIService.isOnline) {
            const serverId = await window.APIService.createEntity('orders', order);
            if (serverId) {
                order.id = serverId;
                console.log('–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å ID:', serverId);
            }
        }
        
        await this.syncWithServer();
        return order;
    },

    // –ü–æ–∏—Å–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π (—Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π ID)
    findUser(id) { 
        if (id === null || id === undefined) return null;
        const normalizedId = typeof id === 'string' ? parseInt(id) : id;
        return this._data.users.find(u => u.id === normalizedId || u.id === String(normalizedId)); 
    },
    
    findProcess(id) { 
        if (id === null || id === undefined) return null;
        const normalizedId = typeof id === 'string' ? parseInt(id) : id;
        return this._data.processes.find(p => p.id === normalizedId || p.id === String(normalizedId)); 
    },
    
    findProduct(id) { 
        if (id === null || id === undefined) return null;
        const normalizedId = typeof id === 'string' ? parseInt(id) : id;
        return this._data.products.find(p => p.id === normalizedId || p.id === String(normalizedId)); 
    },
    
    findOrder(id) { 
        if (id === null || id === undefined) return null;
        const normalizedId = typeof id === 'string' ? parseInt(id) : id;
        return this._data.orders.find(o => o.id === normalizedId || o.id === String(normalizedId)); 
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π (—Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
    async removeUser(id) { 
        this._data.users = this._data.users.filter(u => u.id !== id);
        this.saveToCache();
        await this.syncWithServer();
    },
    
    async removeProcess(id) { 
        this._data.processes = this._data.processes.filter(p => p.id !== id);
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–¥–µ–ª–∏–π
        this._data.products.forEach(product => {
            product.processes = product.processes.filter(pid => pid !== id);
        });
        // –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        this._data.users.forEach(user => {
            user.processes = user.processes.filter(pid => pid !== id);
        });
        this.saveToCache();
        await this.syncWithServer();
    },
    
    async removeProduct(id) { 
        this._data.products = this._data.products.filter(p => p.id !== id);
        this.saveToCache();
        await this.syncWithServer();
    },
    
    async removeOrder(id) { 
        this._data.orders = this._data.orders.filter(o => o.id !== id);
        this.saveToCache();
        await this.syncWithServer();
    },

    // –†–∞–±–æ—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∑–∞–∫–∞–∑–æ–≤
    addOrderHistoryEvent(orderId, eventType, eventData = {}) {
        const order = this.findOrder(orderId);
        if (!order) return;
        
        if (!order.history) {
            order.history = [];
        }
        
        const historyEvent = {
            id: Date.now() + Math.random(),
            timestamp: new Date().toISOString(),
            type: eventType,
            user: eventData.currentUser || { name: '–°–∏—Å—Ç–µ–º–∞' },
            data: {
                fromProcess: eventData.fromProcess || null,
                toProcess: eventData.toProcess || null,
                reason: eventData.reason || null,
                comment: eventData.comment || null,
                isDefect: eventData.isDefect || false
            }
        };
        
        order.history.push(historyEvent);
        this.saveToCache();
        
        console.log('–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é:', historyEvent);
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        this.syncWithServer();
    },

    // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ (—Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
    async moveOrderToProcess(orderId, newProcessId, reason = null, isDefect = false) {
        const order = this.findOrder(orderId);
        if (!order) return false;
        
        const oldProcessId = order.currentProcessId;
        const oldProcess = oldProcessId ? this.findProcess(oldProcessId) : null;
        const newProcess = newProcessId ? this.findProcess(newProcessId) : null;
        
        order.currentProcessId = newProcessId === 0 ? null : newProcessId;
        
        // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        const fromProcessInfo = oldProcess ? 
            { id: oldProcess.id, name: oldProcess.name } : 
            { id: null, name: '–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ' };
            
        const toProcessInfo = newProcess ? 
            { id: newProcess.id, name: newProcess.name } : 
            { id: 0, name: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.addOrderHistoryEvent(orderId, isDefect ? APP_CONSTANTS.EVENT_TYPES.DEFECT_SENT : APP_CONSTANTS.EVENT_TYPES.MOVED, {
            currentUser: this._data.currentUser,
            fromProcess: fromProcessInfo,
            toProcess: toProcessInfo,
            reason: reason,
            isDefect: isDefect
        });
        
        this.saveToCache();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        if (window.APIService && window.APIService.isOnline) {
            const success = await window.APIService.moveOrder(
                orderId, 
                newProcessId, 
                reason, 
                isDefect, 
                this._data.currentUser?.name
            );
            
            if (success) {
                console.log('–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
            } else {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ');
            }
        }
        
        return true;
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage –∫–∞–∫ –∫—ç—à
    saveToCache() {
        try {
            const dataToSave = {
                users: this._data.users,
                processes: this._data.processes,
                products: this._data.products,
                orders: this._data.orders
            };
            
            localStorage.setItem(APP_CONSTANTS.STORAGE_KEYS.CRM_DATA, JSON.stringify(dataToSave));
            console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à (localStorage)');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à:', error);
        }
    },

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º (–ø–æ–ª–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö)
    async syncWithServer() {
        if (window.APIService) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            await window.APIService.checkServerStatus();
            
            if (window.APIService.isOnline) {
                console.log('üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');
                const success = await window.APIService.saveToServer();
                if (success) {
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
                } else {
                    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ');
                }
            } else {
                console.log('üî¥ –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –∫—ç—à');
            }
        } else {
            console.log('‚ö†Ô∏è APIService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–µ—Ä–≤–µ—Ä—É)
    async load() {
        console.log('üìÖ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...');
        
        try {
            // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫—ç—à–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
            console.log('üìÇ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç: –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫—ç—à–∞...');
            this.loadFromCache();
            
            // –ó–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å
            if (window.APIService) {
                console.log('üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
                
                // –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã APIService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è
                await new Promise(resolve => setTimeout(resolve, 500));
                
                const serverLoaded = await window.APIService.loadFromServer();
                if (serverLoaded) {
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
                } else {
                    console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            this.ensureAdminExists();
            
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            this.validateData();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            this.saveToCache();
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            console.log('üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
            this.initializeDefaultData();
            this.ensureAdminExists();
            this.saveToCache();
        }
        
        console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
            –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: this._data.users.length,
            –ø—Ä–æ—Ü–µ—Å—Å—ã: this._data.processes.length,
            –∏–∑–¥–µ–ª–∏—è: this._data.products.length,
            –∑–∞–∫–∞–∑—ã: this._data.orders.length
        });
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –∫—ç—à–∞
    loadFromCache() {
        const savedData = localStorage.getItem(APP_CONSTANTS.STORAGE_KEYS.CRM_DATA);
        if (savedData) {
            try {
                const parsed = JSON.parse(savedData);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                this._data.users = Array.isArray(parsed.users) ? parsed.users : [APP_CONSTANTS.DEFAULTS.ADMIN_USER];
                this._data.processes = Array.isArray(parsed.processes) ? parsed.processes : [];
                this._data.products = Array.isArray(parsed.products) ? parsed.products : [];
                this._data.orders = Array.isArray(parsed.orders) ? parsed.orders : [];
                
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞');
            } catch (parseError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞:', parseError);
                this.initializeDefaultData();
            }
        } else {
            console.log('üìã –ö—ç—à –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            this.initializeDefaultData();
        }
    },
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    initializeDefaultData() {
        this._data.users = [APP_CONSTANTS.DEFAULTS.ADMIN_USER];
        this._data.processes = [];
        this._data.products = [];
        this._data.orders = [];
        console.log('üîß –î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    },
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    ensureAdminExists() {
        const admin = this._data.users.find(u => u.isAdmin);
        if (!admin) {
            console.log('üë§ –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ');
            this._data.users.unshift(APP_CONSTANTS.DEFAULTS.ADMIN_USER);
        }
    },
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    validateData() {
        let hasErrors = false;
        let fixedErrors = [];
        
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –º–∞—Å—Å–∏–≤—ã
        if (!Array.isArray(this._data.users)) {
            console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...');
            this._data.users = [APP_CONSTANTS.DEFAULTS.ADMIN_USER];
            hasErrors = true;
            fixedErrors.push('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∞–¥–º–∏–Ω—É');
        }
        
        if (!Array.isArray(this._data.processes)) {
            console.warn('‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...');
            this._data.processes = [];
            hasErrors = true;
            fixedErrors.push('–ü—Ä–æ—Ü–µ—Å—Å—ã –æ—á–∏—â–µ–Ω—ã');
        }
        
        if (!Array.isArray(this._data.products)) {
            console.warn('‚ö†Ô∏è –ò–∑–¥–µ–ª–∏—è –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...');
            this._data.products = [];
            hasErrors = true;
            fixedErrors.push('–ò–∑–¥–µ–ª–∏—è –æ—á–∏—â–µ–Ω—ã');
        }
        
        if (!Array.isArray(this._data.orders)) {
            console.warn('‚ö†Ô∏è –ó–∞–∫–∞–∑—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...');
            this._data.orders = [];
            hasErrors = true;
            fixedErrors.push('–ó–∞–∫–∞–∑—ã –æ—á–∏—â–µ–Ω—ã');
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID (–≤—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏)
        this._data.users.forEach(user => {
            if (typeof user.id === 'string' && !isNaN(user.id)) {
                user.id = parseInt(user.id);
                hasErrors = true;
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            if (!Array.isArray(user.processes)) {
                user.processes = [];
                hasErrors = true;
            }
        });
        
        this._data.processes.forEach(process => {
            if (typeof process.id === 'string' && !isNaN(process.id)) {
                process.id = parseInt(process.id);
                hasErrors = true;
            }
            if (typeof process.order !== 'number') {
                process.order = 1;
                hasErrors = true;
            }
        });
        
        this._data.products.forEach(product => {
            if (typeof product.id === 'string' && !isNaN(product.id)) {
                product.id = parseInt(product.id);
                hasErrors = true;
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            if (!Array.isArray(product.processes)) {
                product.processes = [];
                hasErrors = true;
            }
        });
        
        this._data.orders.forEach(order => {
            if (typeof order.id === 'string' && !isNaN(order.id)) {
                order.id = parseInt(order.id);
                hasErrors = true;
            }
            if (typeof order.productId === 'string' && !isNaN(order.productId)) {
                order.productId = parseInt(order.productId);
                hasErrors = true;
            }
            if (order.currentProcessId && typeof order.currentProcessId === 'string' && !isNaN(order.currentProcessId)) {
                order.currentProcessId = parseInt(order.currentProcessId);
                hasErrors = true;
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if (!Array.isArray(order.history)) {
                order.history = [];
                hasErrors = true;
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–æ—á–Ω—É—é —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
        this.validateReferentialIntegrity();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        this._data.processes.forEach((process, index) => {
            if (!process.order || process.order !== (index + 1)) {
                process.order = index + 1;
                hasErrors = true;
            }
        });
        
        if (hasErrors) {
            console.log('üîß –î–∞–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:', fixedErrors);
            this.saveToCache();
        } else {
            console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é');
        }
        
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', {
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': this._data.users.length,
            '–ü—Ä–æ—Ü–µ—Å—Å—ã': this._data.processes.length,
            '–ò–∑–¥–µ–ª–∏—è': this._data.products.length,
            '–ó–∞–∫–∞–∑—ã': this._data.orders.length
        });
    },
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ—á–Ω–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    validateReferentialIntegrity() {
        let fixedReferences = 0;
        
        console.log('üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–æ—á–Ω—É—é —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ –∏–∑–¥–µ–ª–∏—è—Ö
        this._data.products.forEach(product => {
            if (Array.isArray(product.processes)) {
                const validProcesses = product.processes.filter(processId => {
                    const process = this.findProcess(processId);
                    if (!process) {
                        console.warn(`üî¥ –ò–∑–¥–µ–ª–∏–µ "${product.name}" —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å ID=${processId}`);
                        fixedReferences++;
                        return false;
                    }
                    return true;
                });
                
                if (validProcesses.length !== product.processes.length) {
                    console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è –∏–∑–¥–µ–ª–∏—è "${product.name}": ${product.processes.length} -> ${validProcesses.length}`);
                    product.processes = validProcesses;
                }
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        this._data.users.forEach(user => {
            if (Array.isArray(user.processes)) {
                const validProcesses = user.processes.filter(processId => {
                    const process = this.findProcess(processId);
                    if (!process) {
                        console.warn(`üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${user.name}" —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å ID=${processId}`);
                        fixedReferences++;
                        return false;
                    }
                    return true;
                });
                
                if (validProcesses.length !== user.processes.length) {
                    console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${user.name}": ${user.processes.length} -> ${validProcesses.length}`);
                    user.processes = validProcesses;
                }
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã
        this._data.orders.forEach(order => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–¥–µ–ª–∏–µ
            const product = this.findProduct(order.productId);
            if (!product) {
                console.warn(`üî¥ –ó–∞–∫–∞–∑ "${order.number}" —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–¥–µ–ª–∏–µ ID=${order.productId}`);
                // –ù–µ —É–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
                fixedReferences++;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
            if (order.currentProcessId) {
                const currentProcess = this.findProcess(order.currentProcessId);
                if (!currentProcess) {
                    console.warn(`üî¥ –ó–∞–∫–∞–∑ "${order.number}" —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å ID=${order.currentProcessId}`);
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ null (–∑–∞–≤–µ—Ä—à–µ–Ω–æ)
                    order.currentProcessId = null;
                    fixedReferences++;
                }
            }
        });
        
        if (fixedReferences > 0) {
            console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedReferences} –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å—Å—ã–ª–æ—á–Ω–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏`);
        } else {
            console.log('‚úÖ –°—Å—ã–ª–æ—á–Ω–∞—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        }
    },

    // –†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    saveCurrentUser() {
        if (this._data.currentUser) {
            sessionStorage.setItem(APP_CONSTANTS.STORAGE_KEYS.CURRENT_USER, JSON.stringify(this._data.currentUser));
            console.log('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', this._data.currentUser.name);
        } else {
            sessionStorage.removeItem(APP_CONSTANTS.STORAGE_KEYS.CURRENT_USER);
            console.log('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —Å–µ—Å—Å–∏–∏');
        }
    },

    loadCurrentUser() {
        try {
            const savedUser = sessionStorage.getItem(APP_CONSTANTS.STORAGE_KEYS.CURRENT_USER);
            if (savedUser) {
                const parsedUser = JSON.parse(savedUser);
                
                const actualUser = this._data.users.find(u => u.id === parsedUser.id);
                if (actualUser) {
                    this._data.currentUser = actualUser;
                    console.log('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:', this._data.currentUser.name, '–ê–¥–º–∏–Ω:', this._data.currentUser.isAdmin);
                    return true;
                } else {
                    console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é');
                    sessionStorage.removeItem(APP_CONSTANTS.STORAGE_KEYS.CURRENT_USER);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            sessionStorage.removeItem(APP_CONSTANTS.STORAGE_KEYS.CURRENT_USER);
        }
        return false;
    },

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞)
    async clearAll() {
        const admin = this._data.users.find(u => u.isAdmin);
        this._data.users = admin ? [admin] : [APP_CONSTANTS.DEFAULTS.ADMIN_USER];
        this._data.processes = [];
        this._data.products = [];
        this._data.orders = [];
        this.saveToCache();
        await this.syncWithServer();
    },

    // –ú–µ—Ç–æ–¥ save –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    save() {
        this.saveToCache();
        this.syncWithServer(); // –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —á–µ—Ä–µ–∑ save()');
    },

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    async createTestData() {
        const processes = [
            { id: Date.now() + 1, name: '–ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–∞', order: 1 },
            { id: Date.now() + 2, name: '–ó–∞–º–µ—Ä', order: 2 },
            { id: Date.now() + 3, name: '–†–µ–∑–∫–∞', order: 3 },
            { id: Date.now() + 4, name: '–£–ø–∞–∫–æ–≤–∫–∞', order: 4 }
        ];
        
        const products = [
            { id: Date.now() + 10, name: '–°—Ç–µ–∫–ª–æ', processes: [processes[0].id, processes[1].id, processes[2].id, processes[3].id] },
            { id: Date.now() + 11, name: '–ó–µ—Ä–∫–∞–ª–æ', processes: [processes[0].id, processes[2].id, processes[3].id] }
        ];
        
        const users = [
            {
                id: Date.now() + 20,
                name: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
                phone: '+7 111 111 1111',
                password: '1111',
                isAdmin: false,
                canCreateOrders: true,
                processes: [processes[0].id]
            },
            {
                id: Date.now() + 21,
                name: '–ú–∞—Å—Ç–µ—Ä —Ä–µ–∑–∫–∏',
                phone: '+7 222 222 2222',
                password: '2222',
                isAdmin: false,
                canCreateOrders: false,
                processes: [processes[2].id]
            }
        ];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        for (const process of processes) {
            await this.addProcess(process);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–¥–µ–ª–∏—è
        for (const product of products) {
            await this.addProduct(product);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for (const user of users) {
            await this.addUser(user);
        }
        
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã');
    }
};

// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å legacy –∫–æ–¥–æ–º
window.DataManager = DataManager;
window.data = DataManager._data;

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.saveData = () => DataManager.saveToCache();
window.loadData = () => DataManager.load();
window.saveCurrentUser = () => DataManager.saveCurrentUser();
window.loadCurrentUser = () => DataManager.loadCurrentUser();
window.addOrderHistoryEvent = (orderId, eventType, eventData) => DataManager.addOrderHistoryEvent(orderId, eventType, eventData);
window.moveOrderToProcess = (orderId, newProcessId, reason, isDefect) => DataManager.moveOrderToProcess(orderId, newProcessId, reason, isDefect);
