const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const bcrypt = require('bcrypt');
const path = require('path');
const DatabaseManager = require('./database/DatabaseManager');

const app = express();
const PORT = process.env.PORT || 3001;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new DatabaseManager();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
const fs = require('fs');
const dbPath = path.join(__dirname, 'database', 'inglass.db');
let dbExists = fs.existsSync(dbPath);

console.log('üóÑÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', dbExists ? '–Ω–∞–π–¥–µ–Ω–∞' : '–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞');

// Middleware
app.use(cors({
    origin: process.env.CORS_ORIGIN || '*',
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(bodyParser.json({ limit: '10mb' }));
app.use(bodyParser.urlencoded({ extended: true }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã - —Ä–∞–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app.use(express.static(path.join(__dirname, '../')));

// API Routes

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req, res) => {
    res.json({
        success: true,
        message: 'Inglass CRM Server —Ä–∞–±–æ—Ç–∞–µ—Ç —Å SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        database: 'SQLite',
        environment: process.env.NODE_ENV || 'development'
    });
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º)
app.get('/api/data', async (req, res) => {
    try {
        const data = await db.getAllData();
        res.json({
            success: true,
            data: data,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
        });
    }
});

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
app.post('/api/data', async (req, res) => {
    try {
        const newData = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!newData || typeof newData !== 'object') {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
            });
        }
        
        console.log('üìù –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –∫–ª–∏–µ–Ω—Ç–∞...');
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        await db.createBackup();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ä–æ–º–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö)
        if (newData.users && Array.isArray(newData.users)) {
            for (const user of newData.users) {
                if (user.id && user.id > 1) { // –ù–µ —Ç—Ä–æ–≥–∞–µ–º –∞–¥–º–∏–Ω–∞ (ID=1)
                    const existingUser = await db.get('SELECT id FROM users WHERE id = ?', [user.id]);
                    if (existingUser) {
                        await db.updateUser(user.id, {
                            name: user.name,
                            phone: user.phone,
                            isAdmin: user.isAdmin,
                            canCreateOrders: user.canCreateOrders,
                            processes: user.processes
                        });
                    } else {
                        await db.createUser({
                            name: user.name,
                            phone: user.phone,
                            password: '0000', // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                            isAdmin: user.isAdmin,
                            canCreateOrders: user.canCreateOrders,
                            processes: user.processes
                        });
                    }
                }
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        if (newData.processes && Array.isArray(newData.processes)) {
            // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            await db.run('DELETE FROM processes');
            // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            for (const process of newData.processes) {
                await db.createProcess({
                    name: process.name,
                    order: process.order || 1
                });
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–¥–µ–ª–∏—è
        if (newData.products && Array.isArray(newData.products)) {
            // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –∏–∑–¥–µ–ª–∏—è
            await db.run('DELETE FROM products');
            // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            for (const product of newData.products) {
                await db.createProduct({
                    name: product.name,
                    processes: product.processes || []
                });
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã
        if (newData.orders && Array.isArray(newData.orders)) {
            for (const order of newData.orders) {
                if (order.id) {
                    const existingOrder = await db.get('SELECT id FROM orders WHERE id = ?', [order.id]);
                    if (existingOrder) {
                        await db.updateOrder(order.id, {
                            client: order.client,
                            product: order.product,
                            quantity: order.quantity,
                            size: order.size,
                            thickness: order.thickness,
                            comment: order.comment,
                            currentProcessId: order.currentProcessId,
                            status: order.status
                        });
                    } else {
                        await db.createOrder({
                            client: order.client,
                            product: order.product,
                            quantity: order.quantity,
                            size: order.size,
                            thickness: order.thickness,
                            comment: order.comment,
                            currentProcessId: order.currentProcessId,
                            status: order.status,
                            createdBy: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è'
                        });
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
                    if (order.history && Array.isArray(order.history)) {
                        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é
                        await db.run('DELETE FROM order_history WHERE order_id = ?', [order.id]);
                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
                        for (const historyItem of order.history) {
                            await db.addOrderHistory(order.id, historyItem.type, {
                                userName: historyItem.user?.name,
                                fromProcessId: historyItem.data?.fromProcess?.id,
                                fromProcessName: historyItem.data?.fromProcess?.name,
                                toProcessId: historyItem.data?.toProcess?.id,
                                toProcessName: historyItem.data?.toProcess?.name,
                                reason: historyItem.data?.reason,
                                comment: historyItem.data?.comment,
                                isDefect: historyItem.data?.isDefect
                            });
                        }
                    }
                }
            }
        }
        
        res.json({
            success: true,
            message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö',
            timestamp: new Date().toISOString()
        });
        
        console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message
        });
    }
});

// === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ===
app.get('/api/users', async (req, res) => {
    try {
        const users = await db.getUsers();
        res.json({ success: true, data: users });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

app.post('/api/users', async (req, res) => {
    try {
        const userData = req.body;
        const userId = await db.createUser(userData);
        res.json({ success: true, id: userId, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

app.put('/api/users/:id', async (req, res) => {
    try {
        const userId = parseInt(req.params.id);
        const userData = req.body;
        const success = await db.updateUser(userId, userData);
        if (success) {
            res.json({ success: true, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω' });
        } else {
            res.status(404).json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

app.delete('/api/users/:id', async (req, res) => {
    try {
        const userId = parseInt(req.params.id);
        if (userId === 1) {
            return res.status(400).json({ success: false, error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
        }
        const success = await db.deleteUser(userId);
        if (success) {
            res.json({ success: true, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω' });
        } else {
            res.status(404).json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/auth/login', async (req, res) => {
    try {
        const { phone, password } = req.body;
        
        const user = await db.getUserByPhone(phone);
        if (!user) {
            return res.status(401).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }
        
        const isValidPassword = await bcrypt.compare(password, user.passwordHash);
        if (!isValidPassword) {
            return res.status(401).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è
        const { passwordHash, ...userWithoutPassword } = user;
        res.json({ success: true, user: userWithoutPassword });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

// === –ü–†–û–¶–ï–°–°–´ ===
app.get('/api/processes', async (req, res) => {
    try {
        const processes = await db.getProcesses();
        res.json({ success: true, data: processes });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

app.post('/api/processes', async (req, res) => {
    try {
        const processData = req.body;
        const processId = await db.createProcess(processData);
        res.json({ success: true, id: processId });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// === –ò–ó–î–ï–õ–ò–Ø ===
app.get('/api/products', async (req, res) => {
    try {
        const products = await db.getProducts();
        res.json({ success: true, data: products });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

app.post('/api/products', async (req, res) => {
    try {
        const productData = req.body;
        const productId = await db.createProduct(productData);
        res.json({ success: true, id: productId });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// === –ó–ê–ö–ê–ó–´ ===
app.get('/api/orders', async (req, res) => {
    try {
        const orders = await db.getOrders();
        res.json({ success: true, data: orders });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

app.post('/api/orders', async (req, res) => {
    try {
        const orderData = req.body;
        const orderId = await db.createOrder(orderData);
        res.json({ success: true, id: orderId });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

app.put('/api/orders/:id', async (req, res) => {
    try {
        const orderId = parseInt(req.params.id);
        const orderData = req.body;
        const success = await db.updateOrder(orderId, orderData);
        if (success) {
            res.json({ success: true, message: '–ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω' });
        } else {
            res.status(404).json({ success: false, error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
app.post('/api/orders/:id/move', async (req, res) => {
    try {
        const orderId = parseInt(req.params.id);
        const { processId, reason, isDefect, userName, processName } = req.body;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
        const currentOrder = await db.get('SELECT current_process_id FROM orders WHERE id = ?', [orderId]);
        if (!currentOrder) {
            return res.status(404).json({ success: false, error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
        let fromProcess = null;
        let toProcess = null;
        
        if (currentOrder.current_process_id) {
            const fromProcessData = await db.get('SELECT id, name FROM processes WHERE id = ?', [currentOrder.current_process_id]);
            if (fromProcessData) {
                fromProcess = { id: fromProcessData.id, name: fromProcessData.name };
            }
        }
        
        if (processId && processId !== 0) {
            const toProcessData = await db.get('SELECT id, name FROM processes WHERE id = ?', [processId]);
            if (toProcessData) {
                toProcess = { id: toProcessData.id, name: toProcessData.name };
            }
        } else if (processId === 0) {
            toProcess = { id: 0, name: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' };
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        await db.updateOrder(orderId, {
            currentProcessId: processId === 0 ? null : processId,
            status: processId === 0 ? 'status-done' : 'status-process'
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        await db.addOrderHistory(orderId, isDefect ? 'defect_sent' : 'moved', {
            userName: userName || '–°–∏—Å—Ç–µ–º–∞',
            fromProcessId: fromProcess?.id,
            fromProcessName: fromProcess?.name,
            toProcessId: toProcess?.id,
            toProcessName: toProcess?.name,
            reason: reason,
            isDefect: isDefect || false
        });
        
        res.json({ success: true, message: '–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–º–µ—â–µ–Ω' });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
app.get('/api/sync-info', (req, res) => {
    res.json({
        success: true,
        lastSync: new Date().toISOString(),
        timestamp: new Date().toISOString(),
        database: 'SQLite'
    });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, '../index.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    res.status(500).json({
        success: false,
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
});

// 404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use((req, res) => {
    res.status(404).json({
        success: false,
        error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
    try {
        // –ï—Å–ª–∏ –±–∞–∑–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—ë
        if (!dbExists) {
            console.log('üî® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
            
            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–∞–∑—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            const dbDir = path.dirname(dbPath);
            if (!fs.existsSync(dbDir)) {
                fs.mkdirSync(dbDir, { recursive: true });
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            const { spawn } = require('child_process');
            const initProcess = spawn('node', [path.join(__dirname, 'database', 'init-database.js')], {
                stdio: 'inherit',
                cwd: __dirname
            });
            
            await new Promise((resolve, reject) => {
                initProcess.on('close', (code) => {
                    if (code === 0) {
                        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                        resolve();
                    } else {
                        reject(new Error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã: ${code}`));
                    }
                });
            });
        }
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.connect();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        app.listen(PORT, '0.0.0.0', () => {
            console.log(`\nüöÄ Inglass CRM Server —Å SQLite –∑–∞–ø—É—â–µ–Ω!`);
            console.log(`üîó –ü–æ—Ä—Ç: ${PORT}`);
            console.log(`üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:${PORT}/`);
            console.log(`üìä API: http://localhost:${PORT}/api`);
            console.log(`üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite (${db.dbPath})`);
            console.log(`üåç Environment: ${process.env.NODE_ENV || 'development'}`);
            console.log(`\nüë§ –ê–¥–º–∏–Ω: +7 777 777 7777 / 1488`);
            console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!\n');
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        process.exit(1);
    }
}

// Graceful shutdown
process.on('SIGINT', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    try {
        await db.createBackup();
        await db.close();
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ:', error);
        process.exit(1);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
    process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise:', reason);
    process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();
