const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const fs = require('fs');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3001;

// –ü—Ä–æ—Å—Ç–æ–µ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–∫–∞–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏)
const DATA_FILE = path.join(__dirname, 'heroku-data.json');

// CORS middleware —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
app.use(cors({
    origin: true, // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Cache-Control', 'Pragma'],
    exposedHeaders: ['Content-Length', 'X-Foo', 'X-Bar']
}));

// Preflight requests
app.options('*', (req, res) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept, Origin, Cache-Control, Pragma');
    res.sendStatus(200);
});

// === –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ API —Ä–æ—É—Ç—ã ===

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
app.get('/api/users', (req, res) => {
    try {
        const data = readData();
        res.json({ success: true, data: data.users || [] });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

app.delete('/api/processes/:id', (req, res) => {
    try {
        const processId = parseInt(req.params.id);
        const data = readData();
        const processIndex = data.processes.findIndex(p => p.id === processId);
        
        if (processIndex === -1) {
            return res.status(404).json({ success: false, error: '–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        data.processes.splice(processIndex, 1);
        writeData(data);
        res.json({ success: true, message: '–ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω' });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

app.put('/api/processes/:id', (req, res) => {
    try {
        const processId = parseInt(req.params.id);
        const data = readData();
        const processIndex = data.processes.findIndex(p => p.id === processId);
        
        if (processIndex === -1) {
            return res.status(404).json({ success: false, error: '–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        data.processes[processIndex] = { ...data.processes[processIndex], ...req.body };
        writeData(data);
        res.json({ success: true, message: '–ü—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω' });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
app.post('/api/orders/:id/move', (req, res) => {
    try {
        const orderId = parseInt(req.params.id);
        const { processId, reason, isDefect, userName } = req.body;
        
        console.log(`üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ${orderId} –≤ –ø—Ä–æ—Ü–µ—Å—Å ${processId}`);
        
        const data = readData();
        const orderIndex = data.orders.findIndex(o => o.id === orderId);
        
        if (orderIndex === -1) {
            return res.status(404).json({ success: false, error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const order = data.orders[orderIndex];
        const oldProcessId = order.currentProcessId;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        data.orders[orderIndex].currentProcessId = processId === 0 ? null : processId;
        data.orders[orderIndex].status = processId === 0 ? 'status-done' : 'status-process';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        if (!data.orders[orderIndex].history) {
            data.orders[orderIndex].history = [];
        }
        
        const historyEntry = {
            id: Date.now(),
            timestamp: new Date().toISOString(),
            type: isDefect ? 'defect_sent' : 'moved',
            user: { name: userName || '–°–∏—Å—Ç–µ–º–∞' },
            data: {
                fromProcess: oldProcessId ? { id: oldProcessId, name: `–ü—Ä–æ—Ü–µ—Å—Å ${oldProcessId}` } : null,
                toProcess: processId === 0 ? { id: 0, name: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' } : { id: processId, name: `–ü—Ä–æ—Ü–µ—Å—Å ${processId}` },
                reason: reason,
                isDefect: isDefect || false
            }
        };
        
        data.orders[orderIndex].history.push(historyEntry);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        const success = writeData(data);
        
        if (success) {
            console.log(`‚úÖ –ó–∞–∫–∞–∑ ${orderId} –ø–µ—Ä–µ–º–µ—â–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
            res.json({ 
                success: true, 
                message: '–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–º–µ—â–µ–Ω',
                orderId: orderId,
                newProcessId: processId
            });
        } else {
            res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è' });
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

app.post('/api/users', (req, res) => {
    try {
        const data = readData();
        const newUser = { ...req.body, id: Date.now() };
        data.users = data.users || [];
        data.users.push(newUser);
        writeData(data);
        res.json({ success: true, id: newUser.id });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// –ü—Ä–æ—Ü–µ—Å—Å—ã
app.get('/api/processes', (req, res) => {
    try {
        const data = readData();
        res.json({ success: true, data: data.processes || [] });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

app.post('/api/processes', (req, res) => {
    try {
        const data = readData();
        const newProcess = { ...req.body, id: Date.now() };
        data.processes = data.processes || [];
        data.processes.push(newProcess);
        writeData(data);
        res.json({ success: true, id: newProcess.id });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// –ò–∑–¥–µ–ª–∏—è
app.get('/api/products', (req, res) => {
    try {
        const data = readData();
        res.json({ success: true, data: data.products || [] });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

app.post('/api/products', (req, res) => {
    try {
        const data = readData();
        const newProduct = { ...req.body, id: Date.now() };
        data.products = data.products || [];
        data.products.push(newProduct);
        writeData(data);
        res.json({ success: true, id: newProduct.id });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// –ó–∞–∫–∞–∑—ã
app.get('/api/orders', (req, res) => {
    try {
        const data = readData();
        res.json({ success: true, data: data.orders || [] });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

app.post('/api/orders', (req, res) => {
    try {
        const data = readData();
        const newOrder = { ...req.body, id: Date.now() };
        data.orders = data.orders || [];
        data.orders.push(newOrder);
        writeData(data);
        res.json({ success: true, id: newOrder.id });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

app.put('/api/orders/:id', (req, res) => {
    try {
        const orderId = parseInt(req.params.id);
        const data = readData();
        const orderIndex = data.orders.findIndex(o => o.id === orderId);
        
        if (orderIndex === -1) {
            return res.status(404).json({ success: false, error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        data.orders[orderIndex] = { ...data.orders[orderIndex], ...req.body };
        writeData(data);
        res.json({ success: true, message: '–ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω' });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

app.use(bodyParser.json({ limit: '10mb' }));
app.use(bodyParser.urlencoded({ extended: true }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
app.use(express.static(__dirname));

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
function readData() {
    try {
        if (fs.existsSync(DATA_FILE)) {
            const data = fs.readFileSync(DATA_FILE, 'utf8');
            return JSON.parse(data);
        } else {
            // –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            const defaultData = {
                users: [{
                    id: 1,
                    name: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                    phone: "+7 777 777 7777",
                    password: "1488",
                    isAdmin: true,
                    processes: [],
                    canCreateOrders: true
                }],
                processes: [],
                products: [],
                orders: [],
                lastSync: new Date().toISOString()
            };
            writeData(defaultData);
            return defaultData;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        return {
            users: [{
                id: 1,
                name: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                phone: "+7 777 777 7777",
                password: "1488",
                isAdmin: true,
                processes: [],
                canCreateOrders: true
            }],
            processes: [],
            products: [],
            orders: [],
            lastSync: new Date().toISOString()
        };
    }
}

function writeData(data) {
    try {
        data.lastSync = new Date().toISOString();
        fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2), 'utf8');
        console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤', new Date().toLocaleString());
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        return false;
    }
}

// API Routes

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req, res) => {
    res.json({
        success: true,
        message: 'Inglass CRM Server —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Heroku',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        environment: process.env.NODE_ENV || 'production'
    });
});

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/auth/login', (req, res) => {
    try {
        const { phone, password } = req.body;
        
        if (!phone || !password) {
            return res.status(400).json({
                success: false,
                error: '–¢–µ–ª–µ—Ñ–æ–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
            });
        }
        
        const data = readData();
        const user = data.users.find(u => u.phone === phone);
        
        if (!user) {
            return res.status(401).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
            });
        }
        
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ bcrypt)
        if (user.password !== password) {
            return res.status(401).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
            });
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–∞—Ä–æ–ª—è
        const { password: _, ...userWithoutPassword } = user;
        
        res.json({
            success: true,
            user: userWithoutPassword
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
app.get('/api/data', (req, res) => {
    try {
        const data = readData();
        res.json({
            success: true,
            data: data,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
        });
    }
});

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
app.post('/api/data', (req, res) => {
    try {
        const newData = req.body;
        
        if (!newData || typeof newData !== 'object') {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
            });
        }
        
        console.log('üìù –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', {
            users: newData.users?.length || 0,
            processes: newData.processes?.length || 0,
            products: newData.products?.length || 0,
            orders: newData.orders?.length || 0
        });
        
        const success = writeData(newData);
        
        if (success) {
            res.json({
                success: true,
                message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
                timestamp: new Date().toISOString()
            });
        } else {
            res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'
        });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
app.get('/api/sync-info', (req, res) => {
    try {
        const data = readData();
        res.json({
            success: true,
            lastSync: data.lastSync || null,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
        });
    }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    res.status(500).json({
        success: false,
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
});

// 404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use((req, res) => {
    res.status(404).json({
        success: false,
        error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ Inglass CRM Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ Heroku!`);
    console.log(`üîó –ü–æ—Ä—Ç: ${PORT}`);
    console.log(`üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Heroku`);
    console.log(`üìä API: /api`);
    console.log(`üìÅ –î–∞–Ω–Ω—ã–µ: ${DATA_FILE}`);
    console.log(`üåç Environment: ${process.env.NODE_ENV || 'production'}`);
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    const data = readData();
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${data.users.length}`);
    console.log(`‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å–æ–≤: ${data.processes.length}`);
    console.log(`üì¶ –ò–∑–¥–µ–ª–∏–π: ${data.products.length}`);
    console.log(`üìã –ó–∞–∫–∞–∑–æ–≤: ${data.orders.length}`);
});
