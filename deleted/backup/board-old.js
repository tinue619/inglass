// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
function showProcessBoard() {
    console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
    
    const mainContent = document.getElementById('mainContent');
    if (!mainContent) {
        console.error('mainContent –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    const user = data.currentUser;
    if (!user) {
        console.error('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    const canCreate = user.isAdmin || user.canCreateOrders;
    
    try {
        mainContent.innerHTML = `
            <div class="board-container">
                ${canCreate ? `
                    <div class="board-header">
                        <button class="btn btn-primary" onclick="showAddOrderModal()">–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑</button>
                        <button class="btn btn-warning" onclick="if(typeof window.testDefectFunction === 'function') { window.testDefectFunction(); } else { alert('–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'); }">üóã –¢–µ—Å—Ç –±—Ä–∞–∫–∞</button>
                        <div class="board-stats">
                            <span>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${data.orders.length}</span>
                            <span>–í —Ä–∞–±–æ—Ç–µ: ${data.orders.filter(o => o.currentProcessId).length}</span>
                            <span>–ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${data.orders.filter(o => !o.currentProcessId).length}</span>
                        </div>
                    </div>
                ` : ''}
                <div class="process-board" id="processBoard">
                    <div style="padding: 20px;">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...</div>
                </div>
            </div>
        `;
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –¥–æ—Å–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => {
            try {
                renderProcessBoard();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–æ—Å–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:', error);
                document.getElementById('processBoard').innerHTML = `
                    <div style="padding: 20px; color: red;">
                        <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</h3>
                        <p>${error.message}</p>
                        <button onclick="renderProcessBoard()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                    </div>
                `;
            }
        }, 100);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:', error);
        mainContent.innerHTML = `
            <div style="padding: 20px; color: red;">
                <h3>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏</h3>
                <p>${error.message}</p>
            </div>
        `;
    }
}

function renderProcessBoard() {
    console.log('–†–µ–Ω–¥–µ—Ä–∏–º –¥–æ—Å–∫—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
    
    const processBoard = document.getElementById('processBoard');
    if (!processBoard) {
        console.error('processBoard –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    const user = data.currentUser;
    const isAdmin = user.isAdmin;
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const availableProcesses = isAdmin 
            ? data.processes 
            : data.processes.filter(p => user.processes.includes(p.id));
        
        console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:', availableProcesses);
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
        const sortedProcesses = availableProcesses.sort((a, b) => a.order - b.order);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É "–ó–∞–≤–µ—Ä—à–µ–Ω–æ" –≤ –∫–æ–Ω–µ—Ü
        const allColumns = [...sortedProcesses];
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É "–ó–∞–≤–µ—Ä—à–µ–Ω–æ" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –∏–ª–∏ –µ—Å–ª–∏ –∞–¥–º–∏–Ω
        const hasAccessToLastProcess = isAdmin || data.processes.some(p => 
            user.processes.includes(p.id) && 
            data.products.some(prod => 
                prod.processes.length > 0 && 
                prod.processes[prod.processes.length - 1] === p.id
            )
        );
        
        if (hasAccessToLastProcess || isAdmin) {
            allColumns.push({ id: 0, name: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', order: 9999 });
        }
        
        if (allColumns.length === 0) {
            processBoard.innerHTML = `
                <div style="padding: 40px; text-align: center; color: #666;">
                    <h3>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ü–µ—Å—Å–∞–º</h3>
                    <p>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞</p>
                </div>
            `;
            return;
        }
        
        processBoard.innerHTML = allColumns.map(process => {
            // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            let orders = data.orders.filter(order => {
                if (process.id === 0) {
                    return !order.currentProcessId;
                }
                return order.currentProcessId === process.id;
            });
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (!isAdmin) {
                orders = orders.filter(order => {
                    const product = data.products.find(p => p.id === order.productId);
                    if (!product) return false;
                    
                    if (process.id === 0) {
                        const lastProcessId = product.processes[product.processes.length - 1];
                        return user.processes.includes(lastProcessId);
                    }
                    
                    return product.processes.includes(process.id);
                });
            }
            
            return `
                <div class="process-column" data-process-id="${process.id}">
                    <div class="process-header">
                        <div class="process-title">${process.name}</div>
                        <div class="process-count">${orders.length} –∑–∞–∫–∞–∑–æ–≤</div>
                    </div>
                    <div class="process-items" id="process-${process.id}">
                        ${orders.length > 0 ? 
                            orders.map(order => renderOrderCard(order, isAdmin)).join('') :
                            '<div class="empty-state">–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</div>'
                        }
                    </div>
                </div>
            `;
        }).join('');
        
        // –î–æ–±–∞–≤–ª—è–µ–º drag and drop –¥–ª—è –∞–¥–º–∏–Ω–∞
        if (isAdmin) {
            try {
                initDragAndDrop();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ drag and drop:', error);
            }
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:', error);
        processBoard.innerHTML = `
            <div style="padding: 20px; color: red;">
                <h3>–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</h3>
                <p>${error.message}</p>
                <button onclick="renderProcessBoard()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
            </div>
        `;
    }
}

function renderOrderCard(order, isAdmin) {
    try {
        const product = data.products.find(p => p.id === order.productId);
        const isDefective = order.defectInfo && order.defectInfo.isDefective;
        
        let statusClass = 'status-process';
        if (!order.currentProcessId) {
            statusClass = 'status-done';
        } else if (isDefective) {
            statusClass = 'status-problem';
        }
        
        return `
            <div class="order-card ${statusClass}" 
                 data-order-id="${order.id}"
                 onclick="showOrderDetails(${order.id})"
                 ${isAdmin ? 'draggable="true"' : ''}>
                <div class="order-number">‚Ññ${order.number}</div>
                <div class="order-customer">${order.customerName}</div>
                ${isDefective ? `
                    <div style="font-size: 12px; color: #dc3545; font-weight: 600; margin: 4px 0;">
                        –ë–†–ê–ö: ${order.defectInfo.defectReason}
                    </div>
                ` : ''}
                <div class="order-created">
                    <small>${new Date(order.createdAt).toLocaleDateString('ru-RU')}</small>
                </div>
            </div>
        `;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞:', error);
        return `
            <div class="order-card" style="border-left: 4px solid red;">
                <div>–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚Ññ${order?.number || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</div>
            </div>
        `;
    }
}

function canUserMoveOrderForward(order, user) {
    if (!order.currentProcessId) return false;
    const product = data.products.find(p => p.id === order.productId);
    if (!product) return false;
    if (!user.processes.includes(order.currentProcessId)) return false;
    const currentIndex = product.processes.indexOf(order.currentProcessId);
    return currentIndex < product.processes.length - 1 || currentIndex === product.processes.length - 1;
}

function canUserMoveOrderBack(order, user) {
    if (!order.currentProcessId) {
        const product = data.products.find(p => p.id === order.productId);
        if (!product) return false;
        const lastProcessId = product.processes[product.processes.length - 1];
        return user.processes.includes(lastProcessId);
    }
    const product = data.products.find(p => p.id === order.productId);
    if (!product) return false;
    if (!user.processes.includes(order.currentProcessId)) return false;
    const currentIndex = product.processes.indexOf(order.currentProcessId);
    return currentIndex > 0;
}

function moveOrderForward(orderId) {
    try {
        const order = data.orders.find(o => o.id === orderId);
        if (!order) return;
        
        const product = data.products.find(p => p.id === order.productId);
        if (!product) return;
        
        const user = data.currentUser;
        
        if (!user.isAdmin && !canUserMoveOrderForward(order, user)) {
            alert('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞');
            return;
        }
        
        const currentIndex = product.processes.indexOf(order.currentProcessId);
        let newProcessId;
        
        if (currentIndex < product.processes.length - 1) {
            newProcessId = product.processes[currentIndex + 1];
        } else {
            newProcessId = null;
        }
        
        moveOrderToProcess(orderId, newProcessId || 0);
        renderProcessBoard();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–ø–µ—Ä–µ–¥:', error);
    }
}

function moveOrderBack(orderId) {
    try {
        const order = data.orders.find(o => o.id === orderId);
        if (!order) return;
        
        const product = data.products.find(p => p.id === order.productId);
        if (!product) return;
        
        const user = data.currentUser;
        
        if (!user.isAdmin && !canUserMoveOrderBack(order, user)) {
            alert('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞');
            return;
        }
        
        let newProcessId;
        if (!order.currentProcessId) {
            newProcessId = product.processes[product.processes.length - 1];
        } else {
            const currentIndex = product.processes.indexOf(order.currentProcessId);
            if (currentIndex > 0) {
                newProcessId = product.processes[currentIndex - 1];
            } else {
                return; // –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –¥–∞–ª—å—à–µ –Ω–∞–∑–∞–¥
            }
        }
        
        moveOrderToProcess(orderId, newProcessId);
        renderProcessBoard();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∑–∞–¥:', error);
    }
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
function showAddOrderModal() {
    console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
    
    if (data.products.length === 0) {
        alert('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–∑–¥–µ–ª–∏—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏');
        return;
    }
    
    const form = `
        <div class="form-group">
            <label>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</label>
            <input type="text" id="order-number" class="form-input" value="${generateOrderNumber()}">
        </div>
        <div class="form-group">
            <label>–ò–∑–¥–µ–ª–∏–µ:</label>
            <select id="order-product" class="form-input">
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–µ–ª–∏–µ</option>
                ${data.products.map(p => `<option value="${p.id}">${p.name}</option>`).join('')}
            </select>
        </div>
        <div class="form-group">
            <label>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</label>
            <input type="text" id="order-customer" class="form-input">
        </div>
        <div class="form-group">
            <label>–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:</label>
            <input type="text" id="order-phone" class="form-input">
        </div>
        <div id="custom-fields"></div>
        <button type="button" class="btn btn-secondary btn-small" onclick="addCustomField()">+ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ</button>
    `;
    
    showModal('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑', form, () => {
        const number = document.getElementById('order-number').value.trim();
        const productId = parseInt(document.getElementById('order-product').value);
        const customerName = document.getElementById('order-customer').value.trim();
        const customerPhone = document.getElementById('order-phone').value.trim();
        
        if (!number || !productId || !customerName || !customerPhone) {
            alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
        if (data.orders.some(o => o.number === number)) {
            alert('–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return false;
        }
        
        const product = data.products.find(p => p.id === productId);
        if (!product || product.processes.length === 0) {
            alert('–£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑–¥–µ–ª–∏—è –Ω–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
            return false;
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
        const customFields = {};
        document.querySelectorAll('.custom-field-row').forEach(row => {
            const key = row.querySelector('.custom-field-key').value.trim();
            const value = row.querySelector('.custom-field-value').value.trim();
            if (key && value) {
                customFields[key] = value;
            }
        });
        
        const newOrder = {
            id: Date.now(),
            number: number,
            productId: productId,
            customerName: customerName,
            customerPhone: customerPhone,
            currentProcessId: product.processes[0], // –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
            customFields: customFields,
            createdAt: new Date().toISOString(),
            history: []
        };
        
        data.orders.push(newOrder);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        const firstProcess = data.processes.find(p => p.id === product.processes[0]);
        addOrderHistoryEvent(newOrder.id, 'created', {
            currentUser: data.currentUser,
            toProcess: { id: product.processes[0], name: firstProcess?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å' }
        });
        saveData();
        renderProcessBoard();
        
        console.log('–ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω:', newOrder);
        return true;
    });
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
function generateOrderNumber() {
    const today = new Date();
    const dateStr = today.getFullYear().toString().substr(-2) + 
                   (today.getMonth() + 1).toString().padStart(2, '0') + 
                   today.getDate().toString().padStart(2, '0');
    
    const existingNumbers = data.orders
        .map(o => o.number)
        .filter(n => n.startsWith(dateStr))
        .map(n => parseInt(n.split('-')[1]) || 0);
    
    const nextNumber = existingNumbers.length > 0 ? Math.max(...existingNumbers) + 1 : 1;
    
    return `${dateStr}-${nextNumber.toString().padStart(3, '0')}`;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è
function addCustomField() {
    const container = document.getElementById('custom-fields');
    if (!container) {
        console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä custom-fields –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    const fieldRow = document.createElement('div');
    fieldRow.className = 'custom-field-row';
    fieldRow.style.cssText = 'display: flex; gap: 10px; margin-bottom: 10px; align-items: center;';
    
    fieldRow.innerHTML = `
        <input type="text" class="custom-field-key form-input" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è" style="flex: 1;">
        <input type="text" class="custom-field-value form-input" placeholder="–ó–Ω–∞—á–µ–Ω–∏–µ" style="flex: 1;">
        <button type="button" class="btn btn-danger btn-small" onclick="this.parentElement.remove()">√ó</button>
    `;
    
    container.appendChild(fieldRow);
    console.log('–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
function showOrderDetails(orderId) {
    const order = data.orders.find(o => o.id === orderId);
    if (!order) {
        alert('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    const product = data.products.find(p => p.id === order.productId);
    const currentProcess = order.currentProcessId ? 
        data.processes.find(p => p.id === order.currentProcessId) : null;
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    const orderInfo = `
        <div class="order-details">
            <div class="order-detail-section">
                <h4>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
                <div class="detail-row">
                    <span class="detail-label">–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</span>
                    <span class="detail-value"><strong>${order.number}</strong></span>
                </div>
                <div class="detail-row">
                    <span class="detail-label">–ò–∑–¥–µ–ª–∏–µ:</span>
                    <span class="detail-value">${product ? product.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
                </div>
                <div class="detail-row">
                    <span class="detail-label">–ö–ª–∏–µ–Ω—Ç:</span>
                    <span class="detail-value">${order.customerName}</span>
                </div>
                <div class="detail-row">
                    <span class="detail-label">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
                    <span class="detail-value"><a href="tel:${order.customerPhone}" style="color: #007bff; text-decoration: none;">${order.customerPhone}</a></span>
                </div>
                <div class="detail-row">
                    <span class="detail-label">–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å:</span>
                    <span class="detail-value status-indicator ${order.currentProcessId ? 'status-process' : 'status-done'}">
                        ${currentProcess ? currentProcess.name : '–ó–∞–≤–µ—Ä—à–µ–Ω'}
                    </span>
                </div>
                <div class="detail-row">
                    <span class="detail-label">–°–æ–∑–¥–∞–Ω:</span>
                    <span class="detail-value">${new Date(order.createdAt).toLocaleDateString('ru-RU')} ${new Date(order.createdAt).toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'})}</span>
                </div>
            </div>
            
            ${Object.keys(order.customFields || {}).length > 0 ? `
                <div class="order-detail-section">
                    <h4>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è</h4>
                    ${Object.entries(order.customFields || {}).map(([key, value]) => `
                        <div class="detail-row">
                            <span class="detail-label">${key}:</span>
                            <span class="detail-value">${value}</span>
                        </div>
                    `).join('')}
                </div>
            ` : ''}
            
            <div class="order-detail-section">
                <h4>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–∞</h4>
                <div class="order-history">
                    ${order.history && order.history.length > 0 ? 
                        order.history
                            .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
                            .map(event => {
                                const date = new Date(event.timestamp);
                                const timeStr = date.toLocaleDateString('ru-RU') + ' ' + 
                                              date.toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'});
                                
                                let eventText = '';
                                let eventClass = '';
                                
                                switch (event.type) {
                                    case 'created':
                                        eventText = `–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ "${event.toProcess?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"`;
                                        eventClass = 'history-created';
                                        break;
                                    case 'moved':
                                        eventText = `–ü–µ—Ä–µ–º–µ—â–µ–Ω –∏–∑ "${event.fromProcess?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}" –≤ "${event.toProcess?.name || '–ó–∞–≤–µ—Ä—à–µ–Ω'}"`;
                                        eventClass = 'history-moved';
                                        break;
                                    case 'defect_sent':
                                        eventText = `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –±—Ä–∞–∫ —Å —ç—Ç–∞–ø–∞ "${event.fromProcess?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}" –Ω–∞ —ç—Ç–∞–ø "${event.toProcess?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"`;
                                        if (event.reason) eventText += `<br><em>–ü—Ä–∏—á–∏–Ω–∞: ${event.reason}</em>`;
                                        eventClass = 'history-defect';
                                        break;
                                    case 'defect_fixed':
                                        eventText = `–ë—Ä–∞–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω, –∑–∞–∫–∞–∑ –≤–æ–∑–≤—Ä–∞—â–µ–Ω —Å —ç—Ç–∞–ø–∞ "${event.fromProcess?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}" –Ω–∞ —ç—Ç–∞–ø "${event.toProcess?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"`;
                                        if (event.reason) eventText += `<br><em>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${event.reason}</em>`;
                                        eventClass = 'history-fixed';
                                        break;
                                    default:
                                        eventText = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ';
                                        eventClass = 'history-unknown';
                                }
                                
                                return `
                                    <div class="history-event ${eventClass}">
                                        <div class="history-content">
                                            <div class="history-text">${eventText}</div>
                                            <div class="history-meta">
                                                ${timeStr} ‚Ä¢ ${event.user || '–°–∏—Å—Ç–µ–º–∞'}
                                            </div>
                                        </div>
                                    </div>
                                `;
                            }).join('') :
                        '<div class="history-empty">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</div>'
                    }
                </div>
            </div>
            
            ${data.currentUser.isAdmin || canUserMoveOrderForward(order, data.currentUser) || canUserMoveOrderBack(order, data.currentUser) || (order.defectInfo && order.defectInfo.isDefective) ? `
                <div class="order-detail-section">
                    <h4>–î–µ–π—Å—Ç–≤–∏—è</h4>
                    <div class="order-actions">
                        ${order.defectInfo && order.defectInfo.isDefective ? 
                            `<button class="btn btn-success btn-small" onclick="showDefectFixModal(${order.id}); closeModal();">–£—Å—Ç—Ä–∞–Ω–∏—Ç—å –±—Ä–∞–∫</button>` : 
                            `${data.currentUser.isAdmin || canUserMoveOrderBack(order, data.currentUser) ? 
                                `<button class="btn btn-secondary btn-small" onclick="moveOrderBack(${order.id}); closeModal(); renderProcessBoard();">–ù–∞–∑–∞–¥</button>` : ''}
                            ${data.currentUser.isAdmin || canUserMoveOrderForward(order, data.currentUser) ? 
                                `<button class="btn btn-primary btn-small" onclick="moveOrderForward(${order.id}); closeModal(); renderProcessBoard();">–í–ø–µ—Ä–µ–¥</button>` : ''}
                            ${order.currentProcessId && (data.currentUser.isAdmin || data.currentUser.processes.includes(order.currentProcessId)) ? 
                                `<button class="btn btn-warning btn-small" onclick="console.log('–ö–Ω–æ–ø–∫–∞ –±—Ä–∞–∫ –Ω–∞–∂–∞—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞', ${order.id}); if(typeof window.showDefectModal === 'function') { window.showDefectModal(${order.id}); } else { alert('–§—É–Ω–∫—Ü–∏—è showDefectModal –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –¢–∏–ø: ' + typeof window.showDefectModal); } closeModal();">–ë—Ä–∞–∫</button>` : ''}`
                        }
                    </div>
                </div>
            ` : ''}
        </div>
    `;
    
    showModal(`–ó–∞–∫–∞–∑ ‚Ññ${order.number}`, orderInfo, null);
}

function initDragAndDrop() {
    let draggedOrder = null;
    
    document.querySelectorAll('.order-card[draggable="true"]').forEach(card => {
        card.addEventListener('dragstart', (e) => {
            draggedOrder = parseInt(e.target.dataset.orderId);
            e.target.classList.add('dragging');
        });
        
        card.addEventListener('dragend', (e) => {
            e.target.classList.remove('dragging');
        });
    });
    
    document.querySelectorAll('.process-items').forEach(column => {
        column.addEventListener('dragover', (e) => {
            e.preventDefault();
            column.style.backgroundColor = '#f0f0f0';
        });
        
        column.addEventListener('dragleave', (e) => {
            column.style.backgroundColor = '';
        });
        
        column.addEventListener('drop', (e) => {
            e.preventDefault();
            column.style.backgroundColor = '';
            
            const processId = parseInt(column.parentElement.dataset.processId);
            
            if (draggedOrder) {
                const order = data.orders.find(o => o.id === draggedOrder);
                if (order) {
                    const product = data.products.find(p => p.id === order.productId);
                    
                    if (processId === 0 || product.processes.includes(processId)) {
                        moveOrderToProcess(draggedOrder, processId === 0 ? null : processId);
                        renderProcessBoard();
                    } else {
                        alert('–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–≥–ª–∞—Å–Ω–æ –º–∞—Ä—à—Ä—É—Ç—É –∏–∑–¥–µ–ª–∏—è');
                    }
                }
            }
        });
    });
}
