// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
const testData = {
    users: [
        {
            id: 1,
            name: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            phone: "+7 777 777 7777",
            password: "1488",
            isAdmin: true,
            processes: [],
            canCreateOrders: true
        },
        {
            id: 2,
            name: "–ú–µ–Ω–µ–¥–∂–µ—Ä –ê–Ω–Ω–∞",
            phone: "+7 111 111 1111",
            password: "1111",
            isAdmin: false,
            canCreateOrders: true,
            processes: [1]
        },
        {
            id: 3,
            name: "–ú–∞—Å—Ç–µ—Ä –ò–≤–∞–Ω",
            phone: "+7 222 222 2222",
            password: "2222",
            isAdmin: false,
            canCreateOrders: false,
            processes: [2, 3]
        }
    ],
    processes: [
        { id: 1, name: '–ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–∞', order: 1 },
        { id: 2, name: '–ó–∞–º–µ—Ä', order: 2 },
        { id: 3, name: '–†–µ–∑–∫–∞ —Å—Ç–µ–∫–ª–∞', order: 3 },
        { id: 4, name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–æ–º–∫–∏', order: 4 },
        { id: 5, name: '–£–ø–∞–∫–æ–≤–∫–∞', order: 5 }
    ],
    products: [
        { 
            id: 1, 
            name: '–°—Ç–µ–∫–ª–æ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ', 
            processes: [1, 2, 3, 4, 5] 
        },
        { 
            id: 2, 
            name: '–ó–µ—Ä–∫–∞–ª–æ', 
            processes: [1, 2, 3, 5] 
        },
        { 
            id: 3, 
            name: '–°—Ç–µ–∫–ª–æ–ø–∞–∫–µ—Ç', 
            processes: [1, 2, 3, 4, 5] 
        }
    ],
    orders: [
        {
            id: 1001,
            client: {
                name: "–û–û–û –°—Ç—Ä–æ–π-–ö–æ–º–ø–ª–µ–∫—Ç",
                contacts: [
                    { type: "phone", value: "+7 123 456 7890", isPrimary: true },
                    { type: "email", value: "info@stroy.ru", isPrimary: false }
                ]
            },
            product: { id: 1, name: "–°—Ç–µ–∫–ª–æ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ" },
            quantity: "2 —à—Ç",
            size: "1000x800 –º–º",
            thickness: "6 –º–º",
            comment: "–°—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑, –Ω—É–∂–Ω–æ –¥–æ –ø—è—Ç–Ω–∏—Ü—ã",
            currentProcessId: 2,
            status: "status-process",
            createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 –¥–Ω—è –Ω–∞–∑–∞–¥
            history: [
                {
                    id: 1,
                    timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
                    type: "created",
                    user: { name: "–ú–µ–Ω–µ–¥–∂–µ—Ä –ê–Ω–Ω–∞" },
                    data: {
                        fromProcess: null,
                        toProcess: { id: 1, name: "–ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–∞" },
                        reason: null,
                        comment: "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω",
                        isDefect: false
                    }
                },
                {
                    id: 2,
                    timestamp: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
                    type: "moved",
                    user: { name: "–ú–µ–Ω–µ–¥–∂–µ—Ä –ê–Ω–Ω–∞" },
                    data: {
                        fromProcess: { id: 1, name: "–ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–∞" },
                        toProcess: { id: 2, name: "–ó–∞–º–µ—Ä" },
                        reason: null,
                        comment: "–ü–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ –∑–∞–º–µ—Ä",
                        isDefect: false
                    }
                }
            ]
        },
        {
            id: 1002,
            client: {
                name: "–ü–µ—Ç—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π",
                contacts: [
                    { type: "phone", value: "+7 987 654 3210", isPrimary: true }
                ]
            },
            product: { id: 2, name: "–ó–µ—Ä–∫–∞–ª–æ" },
            quantity: "1 —à—Ç",
            size: "600x800 –º–º",
            thickness: "4 –º–º",
            comment: "–î–ª—è –≤–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã",
            currentProcessId: 1,
            status: "status-process",
            createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(), // –≤—á–µ—Ä–∞
            history: [
                {
                    id: 3,
                    timestamp: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
                    type: "created",
                    user: { name: "–ú–µ–Ω–µ–¥–∂–µ—Ä –ê–Ω–Ω–∞" },
                    data: {
                        fromProcess: null,
                        toProcess: { id: 1, name: "–ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–∞" },
                        reason: null,
                        comment: "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω",
                        isDefect: false
                    }
                }
            ]
        },
        {
            id: 1003,
            client: {
                name: "–ò–ü –°–∏–¥–æ—Ä–æ–≤",
                contacts: [
                    { type: "phone", value: "+7 555 123 4567", isPrimary: true },
                    { type: "email", value: "sidorov@mail.ru", isPrimary: false }
                ]
            },
            product: { id: 3, name: "–°—Ç–µ–∫–ª–æ–ø–∞–∫–µ—Ç" },
            quantity: "4 —à—Ç",
            size: "1200x1500 –º–º",
            thickness: "–¥–≤—É—Ö–∫–∞–º–µ—Ä–Ω—ã–π",
            comment: "–î–ª—è –æ—Ñ–∏—Å–∞, —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–π",
            currentProcessId: null,
            status: "status-done",
            createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(), // 5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
            history: [
                {
                    id: 4,
                    timestamp: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
                    type: "created",
                    user: { name: "–ú–µ–Ω–µ–¥–∂–µ—Ä –ê–Ω–Ω–∞" },
                    data: {
                        fromProcess: null,
                        toProcess: { id: 1, name: "–ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–∞" },
                        reason: null,
                        comment: "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω",
                        isDefect: false
                    }
                },
                {
                    id: 5,
                    timestamp: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString(),
                    type: "moved",
                    user: { name: "–ú–∞—Å—Ç–µ—Ä –ò–≤–∞–Ω" },
                    data: {
                        fromProcess: { id: 5, name: "–£–ø–∞–∫–æ–≤–∫–∞" },
                        toProcess: { id: 0, name: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ" },
                        reason: null,
                        comment: "–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω",
                        isDefect: false
                    }
                }
            ]
        }
    ],
    lastSync: new Date().toISOString()
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async function createTestData() {
    try {
        console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
        
        const response = await fetch('http://localhost:3001/api/data', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(testData)
        });
        
        if (response.ok) {
            const result = await response.json();
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
            console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${testData.users.length}`);
            console.log(`‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å–æ–≤: ${testData.processes.length}`);
            console.log(`üì¶ –ò–∑–¥–µ–ª–∏–π: ${testData.products.length}`);
            console.log(`üìã –ó–∞–∫–∞–∑–æ–≤: ${testData.orders.length}`);
            
            alert('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!\n\n–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 777 777 7777\n–ü–∞—Ä–æ–ª—å: 1488\n\n–ú–µ–Ω–µ–¥–∂–µ—Ä:\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 111 111 1111\n–ü–∞—Ä–æ–ª—å: 1111\n\n–ú–∞—Å—Ç–µ—Ä:\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 222 222 2222\n–ü–∞—Ä–æ–ª—å: 2222');
        } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}\n\n–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3001`);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function checkServer() {
    try {
        const response = await fetch('http://localhost:3001/api/health');
        if (response.ok) {
            const result = await response.json();
            console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω:', result);
            return true;
        }
    } catch (error) {
        console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
        return false;
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined') {
    window.createTestData = createTestData;
    window.checkServer = checkServer;
    window.testData = testData;
    
    console.log('üß™ –ú–æ–¥—É–ª—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log('–ö–æ–º–∞–Ω–¥—ã:');
    console.log('- createTestData() - —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
    console.log('- checkServer() - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä');
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Node.js
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        testData,
        createTestData,
        checkServer
    };
}
