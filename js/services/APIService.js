// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Å–µ—Ä–≤–µ—Ä–∞
class APIService {
    constructor() {
        this.baseUrl = 'http://localhost:3001/api';
        this.isOnline = false;
        this.syncInProgress = false;
        this.lastSyncTime = null;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.checkServerStatus();
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
        setInterval(() => this.checkServerStatus(), 30000); // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    async checkServerStatus() {
        try {
            const response = await fetch(`${this.baseUrl}/health`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                },
                timeout: 5000
            });
            
            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    if (!this.isOnline) {
                        console.log('üü¢ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                        this.isOnline = true;
                        this.showConnectionStatus(true);
                        
                        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                        this.autoSync();
                    }
                    return true;
                }
            }
        } catch (error) {
            if (this.isOnline) {
                console.log('üî¥ –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ');
                this.isOnline = false;
                this.showConnectionStatus(false);
            }
        }
        return false;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ UI
    showConnectionStatus(online) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingIndicator = document.querySelector('.connection-status');
        if (existingIndicator) {
            existingIndicator.remove();
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        const indicator = document.createElement('div');
        indicator.className = `connection-status ${online ? 'online' : 'offline'}`;
        indicator.textContent = online ? 'üü¢ –û–Ω–ª–∞–π–Ω' : 'üü° –ê–≤—Ç–æ–Ω–æ–º–Ω–æ';
        
        document.body.appendChild(indicator);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –µ—Å–ª–∏ –æ–Ω–ª–∞–π–Ω
        if (online) {
            setTimeout(() => {
                if (indicator.parentNode) {
                    indicator.style.opacity = '0';
                    setTimeout(() => indicator.remove(), 300);
                }
            }, 3000);
        }
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    async autoSync() {
        if (this.isOnline && !this.syncInProgress) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
                const serverData = await this.getData();
                if (serverData) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
                    const localLastSync = localStorage.getItem('lastSyncTime');
                    const serverLastSync = serverData.lastSync;
                    
                    if (!localLastSync || new Date(serverLastSync) > new Date(localLastSync)) {
                        console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞...');
                        await this.loadFromServer();
                    } else {
                        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
                        await this.saveToServer();
                    }
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
            }
        }
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
    async getData() {
        if (!this.isOnline) return null;
        
        try {
            const response = await fetch(`${this.baseUrl}/data`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            if (response.ok) {
                const result = await response.json();
                return result.success ? result.data : null;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            this.isOnline = false;
        }
        return null;
    }
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    async saveData(data) {
        if (!this.isOnline) return false;
        
        try {
            const response = await fetch(`${this.baseUrl}/data`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });
            
            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    this.lastSyncTime = new Date().toISOString();
                    localStorage.setItem('lastSyncTime', this.lastSyncTime);
                    return true;
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            this.isOnline = false;
        }
        return false;
    }
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ DataManager
    async loadFromServer() {
        if (this.syncInProgress) return false;
        
        this.syncInProgress = true;
        
        try {
            const serverData = await this.getData();
            if (serverData) {
                // –û–±–Ω–æ–≤–ª—è–µ–º DataManager
                DataManager._data.users = serverData.users || [APP_CONSTANTS.DEFAULTS.ADMIN_USER];
                DataManager._data.processes = serverData.processes || [];
                DataManager._data.products = serverData.products || [];
                DataManager._data.orders = serverData.orders || [];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
                const admin = DataManager._data.users.find(u => u.isAdmin);
                if (!admin) {
                    DataManager._data.users.unshift(APP_CONSTANTS.DEFAULTS.ADMIN_USER);
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
                DataManager.save();
                this.lastSyncTime = serverData.lastSync;
                localStorage.setItem('lastSyncTime', this.lastSyncTime);
                
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if (window.BoardModule && typeof BoardModule.renderBoard === 'function') {
                    BoardModule.renderBoard();
                }
                
                return true;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
        } finally {
            this.syncInProgress = false;
        }
        
        return false;
    }
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    async saveToServer() {
        if (this.syncInProgress) return false;
        
        this.syncInProgress = true;
        
        try {
            const localData = {
                users: DataManager._data.users,
                processes: DataManager._data.processes,
                products: DataManager._data.products,
                orders: DataManager._data.orders
            };
            
            const success = await this.saveData(localData);
            if (success) {
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
                return true;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
        } finally {
            this.syncInProgress = false;
        }
        
        return false;
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    async forceSync() {
        if (!this.isOnline) {
            alert('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ.');
            return false;
        }
        
        if (this.syncInProgress) {
            alert('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
            return false;
        }
        
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            const indicator = document.createElement('div');
            indicator.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: white;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                z-index: 10001;
            `;
            indicator.innerHTML = `
                <div style="text-align: center;">
                    <div style="font-size: 24px; margin-bottom: 10px;">üîÑ</div>
                    <div>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...</div>
                </div>
            `;
            document.body.appendChild(indicator);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const success = await this.saveToServer();
            
            // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            indicator.remove();
            
            if (success) {
                alert('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
                return true;
            } else {
                alert('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
                return false;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
            alert('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
            return false;
        }
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    getConnectionStatus() {
        return {
            online: this.isOnline,
            lastSync: this.lastSyncTime,
            syncInProgress: this.syncInProgress
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
window.APIService = new APIService();
